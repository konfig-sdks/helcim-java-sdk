/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.CaptureRequest;
import com.konfigthis.client.model.Card;
import com.konfigthis.client.model.FailedPaymentResponse;
import com.konfigthis.client.model.PaymentRequestInvoice;
import com.konfigthis.client.model.PurchaseRequest;
import com.konfigthis.client.model.RefundRequest;
import com.konfigthis.client.model.RefundRequest1;
import com.konfigthis.client.model.SuccessfulAchTransactionResponse;
import com.konfigthis.client.model.SuccessfulPaymentResponse;
import java.util.UUID;
import com.konfigthis.client.model.VerifyRequest;
import com.konfigthis.client.model.VerifyRequestInvoice;
import com.konfigthis.client.model.WithdrawRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Disabled
public class PaymentApiTest {

    private static PaymentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PaymentApi(apiClient);
    }

    /**
     * Process Capture Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processCaptureTransactionTest() throws ApiException {
        Integer preAuthTransactionId = null;
        Double amount = null;
        String ipAddress = null;
        UUID idempotencyKey = null;
        Boolean ecommerce = null;
        SuccessfulPaymentResponse response = api.processCaptureTransaction(preAuthTransactionId, amount, ipAddress, idempotencyKey)
                .ecommerce(ecommerce)
                .execute();
        // TODO: test validations
    }

    /**
     * Process Preauth Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processPreauthTransactionTest() throws ApiException {
        UUID idempotencyKey = null;
        String ipAddress = null;
        Boolean ecommerce = null;
        Integer terminalId = null;
        String currency = null;
        Double amount = null;
        String customerCode = null;
        String invoiceNumber = null;
        PaymentRequestInvoice invoice = null;
        Address billingAddress = null;
        Object cardData = null;
        SuccessfulPaymentResponse response = api.processPreauthTransaction(idempotencyKey)
                .ipAddress(ipAddress)
                .ecommerce(ecommerce)
                .terminalId(terminalId)
                .currency(currency)
                .amount(amount)
                .customerCode(customerCode)
                .invoiceNumber(invoiceNumber)
                .invoice(invoice)
                .billingAddress(billingAddress)
                .cardData(cardData)
                .execute();
        // TODO: test validations
    }

    /**
     * Process Purchase Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processPurchaseTransactionTest() throws ApiException {
        UUID idempotencyKey = null;
        String ipAddress = null;
        Boolean ecommerce = null;
        Integer terminalId = null;
        String currency = null;
        Double amount = null;
        String customerCode = null;
        String invoiceNumber = null;
        PaymentRequestInvoice invoice = null;
        Address billingAddress = null;
        Object cardData = null;
        SuccessfulPaymentResponse response = api.processPurchaseTransaction(idempotencyKey)
                .ipAddress(ipAddress)
                .ecommerce(ecommerce)
                .terminalId(terminalId)
                .currency(currency)
                .amount(amount)
                .customerCode(customerCode)
                .invoiceNumber(invoiceNumber)
                .invoice(invoice)
                .billingAddress(billingAddress)
                .cardData(cardData)
                .execute();
        // TODO: test validations
    }

    /**
     * Process Refund Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processRefundTransactionTest() throws ApiException {
        Integer originalTransactionId = null;
        Double amount = null;
        String ipAddress = null;
        UUID idempotencyKey = null;
        Boolean ecommerce = null;
        SuccessfulPaymentResponse response = api.processRefundTransaction(originalTransactionId, amount, ipAddress, idempotencyKey)
                .ecommerce(ecommerce)
                .execute();
        // TODO: test validations
    }

    /**
     * Process Withdraw Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processWithdrawalTransactionTest() throws ApiException {
        UUID idempotencyKey = null;
        String ipAddress = null;
        Boolean ecommerce = null;
        Integer terminalId = null;
        String currency = null;
        Double amount = null;
        String customerCode = null;
        String invoiceNumber = null;
        PaymentRequestInvoice invoice = null;
        Address billingAddress = null;
        Object bankData = null;
        SuccessfulAchTransactionResponse response = api.processWithdrawalTransaction(idempotencyKey)
                .ipAddress(ipAddress)
                .ecommerce(ecommerce)
                .terminalId(terminalId)
                .currency(currency)
                .amount(amount)
                .customerCode(customerCode)
                .invoiceNumber(invoiceNumber)
                .invoice(invoice)
                .billingAddress(billingAddress)
                .bankData(bankData)
                .execute();
        // TODO: test validations
    }

    /**
     * Process Reverse Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reverseTransactionTest() throws ApiException {
        Integer cardTransactionId = null;
        String ipAddress = null;
        UUID idempotencyKey = null;
        Boolean ecommerce = null;
        Object response = api.reverseTransaction(cardTransactionId, ipAddress, idempotencyKey)
                .ecommerce(ecommerce)
                .execute();
        // TODO: test validations
    }

    /**
     * Process Verify Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyTransactionTest() throws ApiException {
        String ipAddress = null;
        String currency = null;
        Card cardData = null;
        Address billingAddress = null;
        UUID idempotencyKey = null;
        Boolean ecommerce = null;
        String customerCode = null;
        String invoiceNumber = null;
        VerifyRequestInvoice invoice = null;
        SuccessfulPaymentResponse response = api.verifyTransaction(ipAddress, currency, cardData, billingAddress, idempotencyKey)
                .ecommerce(ecommerce)
                .customerCode(customerCode)
                .invoiceNumber(invoiceNumber)
                .invoice(invoice)
                .execute();
        // TODO: test validations
    }

}
