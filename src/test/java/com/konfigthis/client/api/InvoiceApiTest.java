/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.CreateInvoice200Response;
import com.konfigthis.client.model.CreateInvoiceRequest;
import com.konfigthis.client.model.Discount;
import com.konfigthis.client.model.FailedPaymentResponse;
import com.konfigthis.client.model.GetInvoice200Response;
import com.konfigthis.client.model.GetInvoices200ResponseInner;
import com.konfigthis.client.model.LineItem;
import com.konfigthis.client.model.Pickup;
import com.konfigthis.client.model.Shipping;
import com.konfigthis.client.model.Tax;
import com.konfigthis.client.model.UpdateInvoiceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoiceApi
 */
@Disabled
public class InvoiceApiTest {

    private static InvoiceApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new InvoiceApi(apiClient);
    }

    /**
     * Create invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        String invoiceNumber = null;
        Double tipAmount = null;
        Double depositAmount = null;
        String notes = null;
        Integer customerId = null;
        String currency = null;
        String type = null;
        String status = null;
        Address billingAddress = null;
        Shipping shipping = null;
        Pickup pickup = null;
        Tax tax = null;
        Discount discount = null;
        List<LineItem> lineItems = null;
        CreateInvoice200Response response = api.createNew()
                .invoiceNumber(invoiceNumber)
                .tipAmount(tipAmount)
                .depositAmount(depositAmount)
                .notes(notes)
                .customerId(customerId)
                .currency(currency)
                .type(type)
                .status(status)
                .billingAddress(billingAddress)
                .shipping(shipping)
                .pickup(pickup)
                .tax(tax)
                .discount(discount)
                .lineItems(lineItems)
                .execute();
        // TODO: test validations
    }

    /**
     * Get invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String invoiceId = null;
        GetInvoice200Response response = api.getById(invoiceId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get invoices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String invoiceNumber = null;
        String dateStart = null;
        String dateEnd = null;
        Integer withConvenienceFee = null;
        List<GetInvoices200ResponseInner> response = api.list()
                .invoiceNumber(invoiceNumber)
                .dateStart(dateStart)
                .dateEnd(dateEnd)
                .withConvenienceFee(withConvenienceFee)
                .execute();
        // TODO: test validations
    }

    /**
     * Update invoice
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetailsTest() throws ApiException {
        String invoiceId = null;
        String invoiceNumber = null;
        Double tipAmount = null;
        Double depositAmount = null;
        String notes = null;
        String currency = null;
        String type = null;
        String status = null;
        Address billingAddress = null;
        GetInvoice200Response response = api.updateDetails(invoiceId)
                .invoiceNumber(invoiceNumber)
                .tipAmount(tipAmount)
                .depositAmount(depositAmount)
                .notes(notes)
                .currency(currency)
                .type(type)
                .status(status)
                .billingAddress(billingAddress)
                .execute();
        // TODO: test validations
    }

}
