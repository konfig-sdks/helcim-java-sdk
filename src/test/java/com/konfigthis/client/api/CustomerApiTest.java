/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.BankAccountResponse;
import com.konfigthis.client.model.CardResponse;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.CustomerRequest;
import com.konfigthis.client.model.CustomerUpdateRequest;
import com.konfigthis.client.model.FailedPaymentResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomerApi
 */
@Disabled
public class CustomerApiTest {

    private static CustomerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CustomerApi(apiClient);
    }

    /**
     * Create customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewCustomerTest() throws ApiException {
        String customerCode = null;
        String contactName = null;
        String businessName = null;
        String cellPhone = null;
        Address billingAddress = null;
        Address shippingAddress = null;
        Customer response = api.createNewCustomer()
                .customerCode(customerCode)
                .contactName(contactName)
                .businessName(businessName)
                .cellPhone(cellPhone)
                .billingAddress(billingAddress)
                .shippingAddress(shippingAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * Get customer bank account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankAccountTest() throws ApiException {
        Integer customerId = null;
        Integer bankAccountId = null;
        List<BankAccountResponse> response = api.getBankAccount(customerId, bankAccountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get customer bank accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankAccountsTest() throws ApiException {
        Integer customerId = null;
        String bankToken = null;
        Double verified = null;
        Double ready = null;
        List<BankAccountResponse> response = api.getBankAccounts(customerId)
                .bankToken(bankToken)
                .verified(verified)
                .ready(ready)
                .execute();
        // TODO: test validations
    }

    /**
     * Get customer card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCardDetailsTest() throws ApiException {
        Integer customerId = null;
        Integer cardId = null;
        List<CardResponse> response = api.getCardDetails(customerId, cardId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get customer cards
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCardsTest() throws ApiException {
        Integer customerId = null;
        String cardToken = null;
        List<CardResponse> response = api.getCards(customerId)
                .cardToken(cardToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerTest() throws ApiException {
        Integer customerId = null;
        Customer response = api.getCustomer(customerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get customers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String search = null;
        String customerCode = null;
        List<Customer> response = api.list()
                .search(search)
                .customerCode(customerCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Set customer bank account as default
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setBankAccountDefaultTest() throws ApiException {
        Integer customerId = null;
        Integer bankAccountId = null;
        List<BankAccountResponse> response = api.setBankAccountDefault(customerId, bankAccountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetailsTest() throws ApiException {
        String customerId = null;
        String customerCode = null;
        String contactName = null;
        String businessName = null;
        String cellPhone = null;
        Address billingAddress = null;
        Address shippingAddress = null;
        Customer response = api.updateDetails(customerId)
                .customerCode(customerCode)
                .contactName(contactName)
                .businessName(businessName)
                .cellPhone(cellPhone)
                .billingAddress(billingAddress)
                .shippingAddress(shippingAddress)
                .execute();
        // TODO: test validations
    }

}
