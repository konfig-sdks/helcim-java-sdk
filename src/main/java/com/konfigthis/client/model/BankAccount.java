/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BankAccount
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BankAccount {
  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NUMBER = "bankAccountNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NUMBER)
  private String bankAccountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ACCOUNT_CORPORATE = "accountCorporate";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CORPORATE)
  private String accountCorporate;

  public static final String SERIALIZED_NAME_BANK_ID_NUMBER = "bankIdNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ID_NUMBER)
  private String bankIdNumber;

  public static final String SERIALIZED_NAME_TRANSIT_NUMBER = "transitNumber";
  @SerializedName(SERIALIZED_NAME_TRANSIT_NUMBER)
  private String transitNumber;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "streetAddress";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private String streetAddress;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_PROVINCE = "province";
  @SerializedName(SERIALIZED_NAME_PROVINCE)
  private String province;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_PAD_AGREEMENT = "padAgreement";
  @SerializedName(SERIALIZED_NAME_PAD_AGREEMENT)
  private Boolean padAgreement;

  public BankAccount() {
  }

  public BankAccount firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * The bank account holder first name
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "John", required = true, value = "The bank account holder first name")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public BankAccount lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * The bank account holder last name
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Smith", required = true, value = "The bank account holder last name")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public BankAccount companyName(String companyName) {
    
    
    
    
    this.companyName = companyName;
    return this;
  }

   /**
   * The company name
   * @return companyName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Microsoft", required = true, value = "The company name")

  public String getCompanyName() {
    return companyName;
  }


  public void setCompanyName(String companyName) {
    
    
    
    this.companyName = companyName;
  }


  public BankAccount bankAccountNumber(String bankAccountNumber) {
    
    
    
    
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

   /**
   * Bank account number
   * @return bankAccountNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "999999999", required = true, value = "Bank account number")

  public String getBankAccountNumber() {
    return bankAccountNumber;
  }


  public void setBankAccountNumber(String bankAccountNumber) {
    
    
    
    this.bankAccountNumber = bankAccountNumber;
  }


  public BankAccount accountType(String accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * CHECKING - Chequing, SAVINGS - Savings
   * @return accountType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CHECKING", required = true, value = "CHECKING - Chequing, SAVINGS - Savings")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    
    
    
    this.accountType = accountType;
  }


  public BankAccount accountCorporate(String accountCorporate) {
    
    
    
    
    this.accountCorporate = accountCorporate;
    return this;
  }

   /**
   * PERSONAL - Personal Bank Account, CORPORATE - Corporate Bank Account
   * @return accountCorporate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PERSONAL", required = true, value = "PERSONAL - Personal Bank Account, CORPORATE - Corporate Bank Account")

  public String getAccountCorporate() {
    return accountCorporate;
  }


  public void setAccountCorporate(String accountCorporate) {
    
    
    
    this.accountCorporate = accountCorporate;
  }


  public BankAccount bankIdNumber(String bankIdNumber) {
    
    
    
    
    this.bankIdNumber = bankIdNumber;
    return this;
  }

   /**
   * Required for Canadian Bank Account Holder, the institution number - three digits - identifies your bank.
   * @return bankIdNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "888", value = "Required for Canadian Bank Account Holder, the institution number - three digits - identifies your bank.")

  public String getBankIdNumber() {
    return bankIdNumber;
  }


  public void setBankIdNumber(String bankIdNumber) {
    
    
    
    this.bankIdNumber = bankIdNumber;
  }


  public BankAccount transitNumber(String transitNumber) {
    
    
    
    
    this.transitNumber = transitNumber;
    return this;
  }

   /**
   * Required for Canadian Bank Account Holder, the transit number - five digits - shows which branch you opened your account at.
   * @return transitNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "55555", value = "Required for Canadian Bank Account Holder, the transit number - five digits - shows which branch you opened your account at.")

  public String getTransitNumber() {
    return transitNumber;
  }


  public void setTransitNumber(String transitNumber) {
    
    
    
    this.transitNumber = transitNumber;
  }


  public BankAccount routingNumber(String routingNumber) {
    
    
    
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Required for US Bank Account Holder, a nine-digit code printed on the bottom of checks to identify the financial institution on which it was drawn.
   * @return routingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456789", value = "Required for US Bank Account Holder, a nine-digit code printed on the bottom of checks to identify the financial institution on which it was drawn.")

  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    
    
    
    this.routingNumber = routingNumber;
  }


  public BankAccount streetAddress(String streetAddress) {
    
    
    
    
    this.streetAddress = streetAddress;
    return this;
  }

   /**
   * Get streetAddress
   * @return streetAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "440 - something", required = true, value = "")

  public String getStreetAddress() {
    return streetAddress;
  }


  public void setStreetAddress(String streetAddress) {
    
    
    
    this.streetAddress = streetAddress;
  }


  public BankAccount city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Calgary", required = true, value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public BankAccount country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Only allow CAN - Canada, USA - United States
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CAN", required = true, value = "Only allow CAN - Canada, USA - United States")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public BankAccount province(String province) {
    
    
    
    
    this.province = province;
    return this;
  }

   /**
   * Get province
   * @return province
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "AB", required = true, value = "")

  public String getProvince() {
    return province;
  }


  public void setProvince(String province) {
    
    
    
    this.province = province;
  }


  public BankAccount postalCode(String postalCode) {
    
    
    
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Get postalCode
   * @return postalCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "T2T2T2", required = true, value = "")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    
    this.postalCode = postalCode;
  }


  public BankAccount padAgreement(Boolean padAgreement) {
    
    
    
    
    this.padAgreement = padAgreement;
    return this;
  }

   /**
   * Customer given permission for a company or financial institution to debit a bank account when the payment is due.
   * @return padAgreement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Customer given permission for a company or financial institution to debit a bank account when the payment is due.")

  public Boolean getPadAgreement() {
    return padAgreement;
  }


  public void setPadAgreement(Boolean padAgreement) {
    
    
    
    this.padAgreement = padAgreement;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BankAccount instance itself
   */
  public BankAccount putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAccount bankAccount = (BankAccount) o;
    return Objects.equals(this.firstName, bankAccount.firstName) &&
        Objects.equals(this.lastName, bankAccount.lastName) &&
        Objects.equals(this.companyName, bankAccount.companyName) &&
        Objects.equals(this.bankAccountNumber, bankAccount.bankAccountNumber) &&
        Objects.equals(this.accountType, bankAccount.accountType) &&
        Objects.equals(this.accountCorporate, bankAccount.accountCorporate) &&
        Objects.equals(this.bankIdNumber, bankAccount.bankIdNumber) &&
        Objects.equals(this.transitNumber, bankAccount.transitNumber) &&
        Objects.equals(this.routingNumber, bankAccount.routingNumber) &&
        Objects.equals(this.streetAddress, bankAccount.streetAddress) &&
        Objects.equals(this.city, bankAccount.city) &&
        Objects.equals(this.country, bankAccount.country) &&
        Objects.equals(this.province, bankAccount.province) &&
        Objects.equals(this.postalCode, bankAccount.postalCode) &&
        Objects.equals(this.padAgreement, bankAccount.padAgreement)&&
        Objects.equals(this.additionalProperties, bankAccount.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, companyName, bankAccountNumber, accountType, accountCorporate, bankIdNumber, transitNumber, routingNumber, streetAddress, city, country, province, postalCode, padAgreement, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAccount {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    accountCorporate: ").append(toIndentedString(accountCorporate)).append("\n");
    sb.append("    bankIdNumber: ").append(toIndentedString(bankIdNumber)).append("\n");
    sb.append("    transitNumber: ").append(toIndentedString(transitNumber)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    padAgreement: ").append(toIndentedString(padAgreement)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("companyName");
    openapiFields.add("bankAccountNumber");
    openapiFields.add("accountType");
    openapiFields.add("accountCorporate");
    openapiFields.add("bankIdNumber");
    openapiFields.add("transitNumber");
    openapiFields.add("routingNumber");
    openapiFields.add("streetAddress");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("province");
    openapiFields.add("postalCode");
    openapiFields.add("padAgreement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("companyName");
    openapiRequiredFields.add("bankAccountNumber");
    openapiRequiredFields.add("accountType");
    openapiRequiredFields.add("accountCorporate");
    openapiRequiredFields.add("streetAddress");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("province");
    openapiRequiredFields.add("postalCode");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BankAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BankAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankAccount is not found in the empty JSON string", BankAccount.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BankAccount.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if (!jsonObj.get("bankAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountNumber").toString()));
      }
      if (!jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if (!jsonObj.get("accountCorporate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCorporate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCorporate").toString()));
      }
      if ((jsonObj.get("bankIdNumber") != null && !jsonObj.get("bankIdNumber").isJsonNull()) && !jsonObj.get("bankIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankIdNumber").toString()));
      }
      if ((jsonObj.get("transitNumber") != null && !jsonObj.get("transitNumber").isJsonNull()) && !jsonObj.get("transitNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitNumber").toString()));
      }
      if ((jsonObj.get("routingNumber") != null && !jsonObj.get("routingNumber").isJsonNull()) && !jsonObj.get("routingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingNumber").toString()));
      }
      if (!jsonObj.get("streetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("province").toString()));
      }
      if (!jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<BankAccount>() {
           @Override
           public void write(JsonWriter out, BankAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BankAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BankAccount instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BankAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BankAccount
  * @throws IOException if the JSON string is invalid with respect to BankAccount
  */
  public static BankAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankAccount.class);
  }

 /**
  * Convert an instance of BankAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

