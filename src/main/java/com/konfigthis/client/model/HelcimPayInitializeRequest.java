/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * HelcimPayInitializeRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class HelcimPayInitializeRequest {
  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOMER_CODE = "customerCode";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CODE)
  private String customerCode;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_ALLOW_PARTIAL = "allowPartial";
  @SerializedName(SERIALIZED_NAME_ALLOW_PARTIAL)
  private Double allowPartial;

  public static final String SERIALIZED_NAME_HAS_CONVENIENCE_FEE = "hasConvenienceFee";
  @SerializedName(SERIALIZED_NAME_HAS_CONVENIENCE_FEE)
  private Double hasConvenienceFee;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "taxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Double taxAmount;

  public HelcimPayInitializeRequest() {
  }

  public HelcimPayInitializeRequest paymentType(String paymentType) {
    
    
    
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Payment Type. Valid payment types are purchase | preauth | verify
   * @return paymentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "purchase", required = true, value = "Payment Type. Valid payment types are purchase | preauth | verify")

  public String getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(String paymentType) {
    
    
    
    this.paymentType = paymentType;
  }


  public HelcimPayInitializeRequest amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public HelcimPayInitializeRequest amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * The amount of the transaction to be processed
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "100", required = true, value = "The amount of the transaction to be processed")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public HelcimPayInitializeRequest currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency abbreviation. CAD | USD
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CAD", required = true, value = "Currency abbreviation. CAD | USD")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public HelcimPayInitializeRequest customerCode(String customerCode) {
    
    
    
    
    this.customerCode = customerCode;
    return this;
  }

   /**
   * This is the code of an existing customer in Helcim associated with this checkout
   * @return customerCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CST1000", value = "This is the code of an existing customer in Helcim associated with this checkout")

  public String getCustomerCode() {
    return customerCode;
  }


  public void setCustomerCode(String customerCode) {
    
    
    
    this.customerCode = customerCode;
  }


  public HelcimPayInitializeRequest invoiceNumber(String invoiceNumber) {
    
    
    
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * This is the number of an existing invoice in Helcim associated with this checkout
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INV1000", value = "This is the number of an existing invoice in Helcim associated with this checkout")

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  public void setInvoiceNumber(String invoiceNumber) {
    
    
    
    this.invoiceNumber = invoiceNumber;
  }


  public HelcimPayInitializeRequest paymentMethod(String paymentMethod) {
    
    
    
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * This is the payment method (credit card, ACH) that customer can use to pay the amount. cc | ach | cc-ach
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "cc-ach", value = "This is the payment method (credit card, ACH) that customer can use to pay the amount. cc | ach | cc-ach")

  public String getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(String paymentMethod) {
    
    
    
    this.paymentMethod = paymentMethod;
  }


  public HelcimPayInitializeRequest allowPartial(Double allowPartial) {
    
    
    
    
    this.allowPartial = allowPartial;
    return this;
  }

  public HelcimPayInitializeRequest allowPartial(Integer allowPartial) {
    
    
    
    
    this.allowPartial = allowPartial.doubleValue();
    return this;
  }

   /**
   * This is used to determine whether the partial payment UI will be displayed to the customer
   * @return allowPartial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "This is used to determine whether the partial payment UI will be displayed to the customer")

  public Double getAllowPartial() {
    return allowPartial;
  }


  public void setAllowPartial(Double allowPartial) {
    
    
    
    this.allowPartial = allowPartial;
  }


  public HelcimPayInitializeRequest hasConvenienceFee(Double hasConvenienceFee) {
    
    
    
    
    this.hasConvenienceFee = hasConvenienceFee;
    return this;
  }

  public HelcimPayInitializeRequest hasConvenienceFee(Integer hasConvenienceFee) {
    
    
    
    
    this.hasConvenienceFee = hasConvenienceFee.doubleValue();
    return this;
  }

   /**
   * This is used to apply the convenience fee rate to credit card transaction should customer chooses this payment method
   * @return hasConvenienceFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "This is used to apply the convenience fee rate to credit card transaction should customer chooses this payment method")

  public Double getHasConvenienceFee() {
    return hasConvenienceFee;
  }


  public void setHasConvenienceFee(Double hasConvenienceFee) {
    
    
    
    this.hasConvenienceFee = hasConvenienceFee;
  }


  public HelcimPayInitializeRequest taxAmount(Double taxAmount) {
    
    
    
    
    this.taxAmount = taxAmount;
    return this;
  }

  public HelcimPayInitializeRequest taxAmount(Integer taxAmount) {
    
    
    
    
    this.taxAmount = taxAmount.doubleValue();
    return this;
  }

   /**
   * This is used to enable level 2 processing lower rates. The value should be the dollar amount of the tax to 2 decimal places.
   * @return taxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3.67", value = "This is used to enable level 2 processing lower rates. The value should be the dollar amount of the tax to 2 decimal places.")

  public Double getTaxAmount() {
    return taxAmount;
  }


  public void setTaxAmount(Double taxAmount) {
    
    
    
    this.taxAmount = taxAmount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the HelcimPayInitializeRequest instance itself
   */
  public HelcimPayInitializeRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HelcimPayInitializeRequest helcimPayInitializeRequest = (HelcimPayInitializeRequest) o;
    return Objects.equals(this.paymentType, helcimPayInitializeRequest.paymentType) &&
        Objects.equals(this.amount, helcimPayInitializeRequest.amount) &&
        Objects.equals(this.currency, helcimPayInitializeRequest.currency) &&
        Objects.equals(this.customerCode, helcimPayInitializeRequest.customerCode) &&
        Objects.equals(this.invoiceNumber, helcimPayInitializeRequest.invoiceNumber) &&
        Objects.equals(this.paymentMethod, helcimPayInitializeRequest.paymentMethod) &&
        Objects.equals(this.allowPartial, helcimPayInitializeRequest.allowPartial) &&
        Objects.equals(this.hasConvenienceFee, helcimPayInitializeRequest.hasConvenienceFee) &&
        Objects.equals(this.taxAmount, helcimPayInitializeRequest.taxAmount)&&
        Objects.equals(this.additionalProperties, helcimPayInitializeRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentType, amount, currency, customerCode, invoiceNumber, paymentMethod, allowPartial, hasConvenienceFee, taxAmount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HelcimPayInitializeRequest {\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customerCode: ").append(toIndentedString(customerCode)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    allowPartial: ").append(toIndentedString(allowPartial)).append("\n");
    sb.append("    hasConvenienceFee: ").append(toIndentedString(hasConvenienceFee)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentType");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("customerCode");
    openapiFields.add("invoiceNumber");
    openapiFields.add("paymentMethod");
    openapiFields.add("allowPartial");
    openapiFields.add("hasConvenienceFee");
    openapiFields.add("taxAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("paymentType");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HelcimPayInitializeRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HelcimPayInitializeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HelcimPayInitializeRequest is not found in the empty JSON string", HelcimPayInitializeRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HelcimPayInitializeRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("customerCode") != null && !jsonObj.get("customerCode").isJsonNull()) && !jsonObj.get("customerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerCode").toString()));
      }
      if ((jsonObj.get("invoiceNumber") != null && !jsonObj.get("invoiceNumber").isJsonNull()) && !jsonObj.get("invoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceNumber").toString()));
      }
      if ((jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull()) && !jsonObj.get("paymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HelcimPayInitializeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HelcimPayInitializeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HelcimPayInitializeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HelcimPayInitializeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<HelcimPayInitializeRequest>() {
           @Override
           public void write(JsonWriter out, HelcimPayInitializeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public HelcimPayInitializeRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             HelcimPayInitializeRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HelcimPayInitializeRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HelcimPayInitializeRequest
  * @throws IOException if the JSON string is invalid with respect to HelcimPayInitializeRequest
  */
  public static HelcimPayInitializeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HelcimPayInitializeRequest.class);
  }

 /**
  * Convert an instance of HelcimPayInitializeRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

