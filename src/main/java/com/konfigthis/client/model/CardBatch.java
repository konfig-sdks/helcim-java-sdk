/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CardBatch
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CardBatch {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "dateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private String dateUpdated;

  public static final String SERIALIZED_NAME_DATE_CLOSED = "dateClosed";
  @SerializedName(SERIALIZED_NAME_DATE_CLOSED)
  private String dateClosed;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_TERMINAL_ID = "terminalId";
  @SerializedName(SERIALIZED_NAME_TERMINAL_ID)
  private Integer terminalId;

  public static final String SERIALIZED_NAME_BATCH_NUMBER = "batchNumber";
  @SerializedName(SERIALIZED_NAME_BATCH_NUMBER)
  private Integer batchNumber;

  public static final String SERIALIZED_NAME_NET_SALES = "netSales";
  @SerializedName(SERIALIZED_NAME_NET_SALES)
  private Double netSales;

  public static final String SERIALIZED_NAME_TOTAL_SALES = "totalSales";
  @SerializedName(SERIALIZED_NAME_TOTAL_SALES)
  private Double totalSales;

  public static final String SERIALIZED_NAME_TOTAL_REFUNDS = "totalRefunds";
  @SerializedName(SERIALIZED_NAME_TOTAL_REFUNDS)
  private Double totalRefunds;

  public static final String SERIALIZED_NAME_TOTAL_REVERSED = "totalReversed";
  @SerializedName(SERIALIZED_NAME_TOTAL_REVERSED)
  private Double totalReversed;

  public static final String SERIALIZED_NAME_TOTAL_REFUNDS_REVERSED = "totalRefundsReversed";
  @SerializedName(SERIALIZED_NAME_TOTAL_REFUNDS_REVERSED)
  private Double totalRefundsReversed;

  public static final String SERIALIZED_NAME_COUNT_TOTAL = "countTotal";
  @SerializedName(SERIALIZED_NAME_COUNT_TOTAL)
  private Double countTotal;

  public static final String SERIALIZED_NAME_COUNT_APPROVED = "countApproved";
  @SerializedName(SERIALIZED_NAME_COUNT_APPROVED)
  private Double countApproved;

  public static final String SERIALIZED_NAME_COUNT_DECLINED = "countDeclined";
  @SerializedName(SERIALIZED_NAME_COUNT_DECLINED)
  private Double countDeclined;

  public CardBatch() {
  }

  public CardBatch id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Id of Card batch
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2488717", value = "Id of Card batch")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public CardBatch dateCreated(String dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Date Card batch is Created
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-11-30 13:14:53", value = "Date Card batch is Created")

  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public CardBatch dateUpdated(String dateUpdated) {
    
    
    
    
    this.dateUpdated = dateUpdated;
    return this;
  }

   /**
   * Date Card batch is last updated
   * @return dateUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-11-30 13:14:53", value = "Date Card batch is last updated")

  public String getDateUpdated() {
    return dateUpdated;
  }


  public void setDateUpdated(String dateUpdated) {
    
    
    
    this.dateUpdated = dateUpdated;
  }


  public CardBatch dateClosed(String dateClosed) {
    
    
    
    
    this.dateClosed = dateClosed;
    return this;
  }

   /**
   * Date Card Batch is closed
   * @return dateClosed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-11-30 14:14:53", value = "Date Card Batch is closed")

  public String getDateClosed() {
    return dateClosed;
  }


  public void setDateClosed(String dateClosed) {
    
    
    
    this.dateClosed = dateClosed;
  }


  public CardBatch closed(Boolean closed) {
    
    
    
    
    this.closed = closed;
    return this;
  }

   /**
   * True if the batch is closed. Else false
   * @return closed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "True if the batch is closed. Else false")

  public Boolean getClosed() {
    return closed;
  }


  public void setClosed(Boolean closed) {
    
    
    
    this.closed = closed;
  }


  public CardBatch terminalId(Integer terminalId) {
    
    
    
    
    this.terminalId = terminalId;
    return this;
  }

   /**
   * Id of associated Terminal
   * @return terminalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1411", value = "Id of associated Terminal")

  public Integer getTerminalId() {
    return terminalId;
  }


  public void setTerminalId(Integer terminalId) {
    
    
    
    this.terminalId = terminalId;
  }


  public CardBatch batchNumber(Integer batchNumber) {
    
    
    
    
    this.batchNumber = batchNumber;
    return this;
  }

   /**
   * Batch Number
   * @return batchNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "Batch Number")

  public Integer getBatchNumber() {
    return batchNumber;
  }


  public void setBatchNumber(Integer batchNumber) {
    
    
    
    this.batchNumber = batchNumber;
  }


  public CardBatch netSales(Double netSales) {
    
    
    
    
    this.netSales = netSales;
    return this;
  }

  public CardBatch netSales(Integer netSales) {
    
    
    
    
    this.netSales = netSales.doubleValue();
    return this;
  }

   /**
   * Approved sales net refunds and voids
   * @return netSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "90", value = "Approved sales net refunds and voids")

  public Double getNetSales() {
    return netSales;
  }


  public void setNetSales(Double netSales) {
    
    
    
    this.netSales = netSales;
  }


  public CardBatch totalSales(Double totalSales) {
    
    
    
    
    this.totalSales = totalSales;
    return this;
  }

  public CardBatch totalSales(Integer totalSales) {
    
    
    
    
    this.totalSales = totalSales.doubleValue();
    return this;
  }

   /**
   * Gross sales
   * @return totalSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Gross sales")

  public Double getTotalSales() {
    return totalSales;
  }


  public void setTotalSales(Double totalSales) {
    
    
    
    this.totalSales = totalSales;
  }


  public CardBatch totalRefunds(Double totalRefunds) {
    
    
    
    
    this.totalRefunds = totalRefunds;
    return this;
  }

  public CardBatch totalRefunds(Integer totalRefunds) {
    
    
    
    
    this.totalRefunds = totalRefunds.doubleValue();
    return this;
  }

   /**
   * Gross refunds
   * @return totalRefunds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8.5", value = "Gross refunds")

  public Double getTotalRefunds() {
    return totalRefunds;
  }


  public void setTotalRefunds(Double totalRefunds) {
    
    
    
    this.totalRefunds = totalRefunds;
  }


  public CardBatch totalReversed(Double totalReversed) {
    
    
    
    
    this.totalReversed = totalReversed;
    return this;
  }

  public CardBatch totalReversed(Integer totalReversed) {
    
    
    
    
    this.totalReversed = totalReversed.doubleValue();
    return this;
  }

   /**
   * Voided amount
   * @return totalReversed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Voided amount")

  public Double getTotalReversed() {
    return totalReversed;
  }


  public void setTotalReversed(Double totalReversed) {
    
    
    
    this.totalReversed = totalReversed;
  }


  public CardBatch totalRefundsReversed(Double totalRefundsReversed) {
    
    
    
    
    this.totalRefundsReversed = totalRefundsReversed;
    return this;
  }

  public CardBatch totalRefundsReversed(Integer totalRefundsReversed) {
    
    
    
    
    this.totalRefundsReversed = totalRefundsReversed.doubleValue();
    return this;
  }

   /**
   * Amount of voided refunds
   * @return totalRefundsReversed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3.5", value = "Amount of voided refunds")

  public Double getTotalRefundsReversed() {
    return totalRefundsReversed;
  }


  public void setTotalRefundsReversed(Double totalRefundsReversed) {
    
    
    
    this.totalRefundsReversed = totalRefundsReversed;
  }


  public CardBatch countTotal(Double countTotal) {
    
    
    
    
    this.countTotal = countTotal;
    return this;
  }

  public CardBatch countTotal(Integer countTotal) {
    
    
    
    
    this.countTotal = countTotal.doubleValue();
    return this;
  }

   /**
   * Total number of transactions
   * @return countTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8", value = "Total number of transactions")

  public Double getCountTotal() {
    return countTotal;
  }


  public void setCountTotal(Double countTotal) {
    
    
    
    this.countTotal = countTotal;
  }


  public CardBatch countApproved(Double countApproved) {
    
    
    
    
    this.countApproved = countApproved;
    return this;
  }

  public CardBatch countApproved(Integer countApproved) {
    
    
    
    
    this.countApproved = countApproved.doubleValue();
    return this;
  }

   /**
   * Number of approved transactions
   * @return countApproved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8", value = "Number of approved transactions")

  public Double getCountApproved() {
    return countApproved;
  }


  public void setCountApproved(Double countApproved) {
    
    
    
    this.countApproved = countApproved;
  }


  public CardBatch countDeclined(Double countDeclined) {
    
    
    
    
    this.countDeclined = countDeclined;
    return this;
  }

  public CardBatch countDeclined(Integer countDeclined) {
    
    
    
    
    this.countDeclined = countDeclined.doubleValue();
    return this;
  }

   /**
   * Number of declined transactions
   * @return countDeclined
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Number of declined transactions")

  public Double getCountDeclined() {
    return countDeclined;
  }


  public void setCountDeclined(Double countDeclined) {
    
    
    
    this.countDeclined = countDeclined;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CardBatch instance itself
   */
  public CardBatch putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardBatch cardBatch = (CardBatch) o;
    return Objects.equals(this.id, cardBatch.id) &&
        Objects.equals(this.dateCreated, cardBatch.dateCreated) &&
        Objects.equals(this.dateUpdated, cardBatch.dateUpdated) &&
        Objects.equals(this.dateClosed, cardBatch.dateClosed) &&
        Objects.equals(this.closed, cardBatch.closed) &&
        Objects.equals(this.terminalId, cardBatch.terminalId) &&
        Objects.equals(this.batchNumber, cardBatch.batchNumber) &&
        Objects.equals(this.netSales, cardBatch.netSales) &&
        Objects.equals(this.totalSales, cardBatch.totalSales) &&
        Objects.equals(this.totalRefunds, cardBatch.totalRefunds) &&
        Objects.equals(this.totalReversed, cardBatch.totalReversed) &&
        Objects.equals(this.totalRefundsReversed, cardBatch.totalRefundsReversed) &&
        Objects.equals(this.countTotal, cardBatch.countTotal) &&
        Objects.equals(this.countApproved, cardBatch.countApproved) &&
        Objects.equals(this.countDeclined, cardBatch.countDeclined)&&
        Objects.equals(this.additionalProperties, cardBatch.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dateCreated, dateUpdated, dateClosed, closed, terminalId, batchNumber, netSales, totalSales, totalRefunds, totalReversed, totalRefundsReversed, countTotal, countApproved, countDeclined, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardBatch {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    dateClosed: ").append(toIndentedString(dateClosed)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("    batchNumber: ").append(toIndentedString(batchNumber)).append("\n");
    sb.append("    netSales: ").append(toIndentedString(netSales)).append("\n");
    sb.append("    totalSales: ").append(toIndentedString(totalSales)).append("\n");
    sb.append("    totalRefunds: ").append(toIndentedString(totalRefunds)).append("\n");
    sb.append("    totalReversed: ").append(toIndentedString(totalReversed)).append("\n");
    sb.append("    totalRefundsReversed: ").append(toIndentedString(totalRefundsReversed)).append("\n");
    sb.append("    countTotal: ").append(toIndentedString(countTotal)).append("\n");
    sb.append("    countApproved: ").append(toIndentedString(countApproved)).append("\n");
    sb.append("    countDeclined: ").append(toIndentedString(countDeclined)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("dateCreated");
    openapiFields.add("dateUpdated");
    openapiFields.add("dateClosed");
    openapiFields.add("closed");
    openapiFields.add("terminalId");
    openapiFields.add("batchNumber");
    openapiFields.add("netSales");
    openapiFields.add("totalSales");
    openapiFields.add("totalRefunds");
    openapiFields.add("totalReversed");
    openapiFields.add("totalRefundsReversed");
    openapiFields.add("countTotal");
    openapiFields.add("countApproved");
    openapiFields.add("countDeclined");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CardBatch
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CardBatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardBatch is not found in the empty JSON string", CardBatch.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateUpdated") != null && !jsonObj.get("dateUpdated").isJsonNull()) && !jsonObj.get("dateUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateUpdated").toString()));
      }
      if ((jsonObj.get("dateClosed") != null && !jsonObj.get("dateClosed").isJsonNull()) && !jsonObj.get("dateClosed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateClosed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateClosed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardBatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardBatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardBatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardBatch.class));

       return (TypeAdapter<T>) new TypeAdapter<CardBatch>() {
           @Override
           public void write(JsonWriter out, CardBatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CardBatch read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CardBatch instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardBatch given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardBatch
  * @throws IOException if the JSON string is invalid with respect to CardBatch
  */
  public static CardBatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardBatch.class);
  }

 /**
  * Convert an instance of CardBatch to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

