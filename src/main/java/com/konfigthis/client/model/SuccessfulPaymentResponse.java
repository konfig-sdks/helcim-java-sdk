/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SuccessfulPaymentResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SuccessfulPaymentResponse {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private Double transactionId;

  public static final String SERIALIZED_NAME_CARD_BATCH_ID = "cardBatchId";
  @SerializedName(SERIALIZED_NAME_CARD_BATCH_ID)
  private Double cardBatchId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_AVS_RESPONSE = "avsResponse";
  @SerializedName(SERIALIZED_NAME_AVS_RESPONSE)
  private String avsResponse;

  public static final String SERIALIZED_NAME_CVV_RESPONSE = "cvvResponse";
  @SerializedName(SERIALIZED_NAME_CVV_RESPONSE)
  private String cvvResponse;

  public static final String SERIALIZED_NAME_APPROVAL_CODE = "approvalCode";
  @SerializedName(SERIALIZED_NAME_APPROVAL_CODE)
  private String approvalCode;

  public static final String SERIALIZED_NAME_CARD_TOKEN = "cardToken";
  @SerializedName(SERIALIZED_NAME_CARD_TOKEN)
  private String cardToken;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "cardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_CARD_HOLDER_NAME = "cardHolderName";
  @SerializedName(SERIALIZED_NAME_CARD_HOLDER_NAME)
  private String cardHolderName;

  public static final String SERIALIZED_NAME_CUSTOMER_CODE = "customerCode";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CODE)
  private String customerCode;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_WARNING = "warning";
  @SerializedName(SERIALIZED_NAME_WARNING)
  private String warning;

  public SuccessfulPaymentResponse() {
  }

  public SuccessfulPaymentResponse transactionId(Double transactionId) {
    
    
    
    
    this.transactionId = transactionId;
    return this;
  }

  public SuccessfulPaymentResponse transactionId(Integer transactionId) {
    
    
    
    
    this.transactionId = transactionId.doubleValue();
    return this;
  }

   /**
   * The transaction id
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "The transaction id")

  public Double getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(Double transactionId) {
    
    
    
    this.transactionId = transactionId;
  }


  public SuccessfulPaymentResponse cardBatchId(Double cardBatchId) {
    
    
    
    
    this.cardBatchId = cardBatchId;
    return this;
  }

  public SuccessfulPaymentResponse cardBatchId(Integer cardBatchId) {
    
    
    
    
    this.cardBatchId = cardBatchId.doubleValue();
    return this;
  }

   /**
   * The id of associated card batch
   * @return cardBatchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11", value = "The id of associated card batch")

  public Double getCardBatchId() {
    return cardBatchId;
  }


  public void setCardBatchId(Double cardBatchId) {
    
    
    
    this.cardBatchId = cardBatchId;
  }


  public SuccessfulPaymentResponse dateCreated(String dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * The date(Mountain Time) when the transaction is created.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-01 00:00:00", value = "The date(Mountain Time) when the transaction is created.")

  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public SuccessfulPaymentResponse status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the transaction. possible values are APPROVED | DECLINED
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "APPROVED", value = "The status of the transaction. possible values are APPROVED | DECLINED")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public SuccessfulPaymentResponse user(String user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Full name of the user who processed the transaction. Default value is Helcim System
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Helcim System", value = "Full name of the user who processed the transaction. Default value is Helcim System")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    
    
    
    this.user = user;
  }


  public SuccessfulPaymentResponse type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of the transaction. possible values are purchase | preauth | verify
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "purchase", value = "The type of the transaction. possible values are purchase | preauth | verify")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public SuccessfulPaymentResponse amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public SuccessfulPaymentResponse amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * The amount of processed transaction
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11.99", value = "The amount of processed transaction")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public SuccessfulPaymentResponse currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The abbreviation of the transaction&#39;s currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CAD", value = "The abbreviation of the transaction's currency")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public SuccessfulPaymentResponse avsResponse(String avsResponse) {
    
    
    
    
    this.avsResponse = avsResponse;
    return this;
  }

   /**
   * AVS Response
   * @return avsResponse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "M", value = "AVS Response")

  public String getAvsResponse() {
    return avsResponse;
  }


  public void setAvsResponse(String avsResponse) {
    
    
    
    this.avsResponse = avsResponse;
  }


  public SuccessfulPaymentResponse cvvResponse(String cvvResponse) {
    
    
    
    
    this.cvvResponse = cvvResponse;
    return this;
  }

   /**
   * CVV Response
   * @return cvvResponse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Y", value = "CVV Response")

  public String getCvvResponse() {
    return cvvResponse;
  }


  public void setCvvResponse(String cvvResponse) {
    
    
    
    this.cvvResponse = cvvResponse;
  }


  public SuccessfulPaymentResponse approvalCode(String approvalCode) {
    
    
    
    
    this.approvalCode = approvalCode;
    return this;
  }

   /**
   * Approval Code
   * @return approvalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "HCMAPPRV", value = "Approval Code")

  public String getApprovalCode() {
    return approvalCode;
  }


  public void setApprovalCode(String approvalCode) {
    
    
    
    this.approvalCode = approvalCode;
  }


  public SuccessfulPaymentResponse cardToken(String cardToken) {
    
    
    
    
    this.cardToken = cardToken;
    return this;
  }

   /**
   * Card token associated to the transaction
   * @return cardToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5454HCMXTEST5454", value = "Card token associated to the transaction")

  public String getCardToken() {
    return cardToken;
  }


  public void setCardToken(String cardToken) {
    
    
    
    this.cardToken = cardToken;
  }


  public SuccessfulPaymentResponse cardNumber(String cardNumber) {
    
    
    
    
    this.cardNumber = cardNumber;
    return this;
  }

   /**
   * First-6 Last-4 numbers of the card number associated to the transaction
   * @return cardNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5454545454", value = "First-6 Last-4 numbers of the card number associated to the transaction")

  public String getCardNumber() {
    return cardNumber;
  }


  public void setCardNumber(String cardNumber) {
    
    
    
    this.cardNumber = cardNumber;
  }


  public SuccessfulPaymentResponse cardHolderName(String cardHolderName) {
    
    
    
    
    this.cardHolderName = cardHolderName;
    return this;
  }

   /**
   * Cardholdername associated to the transaction
   * @return cardHolderName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Smith", value = "Cardholdername associated to the transaction")

  public String getCardHolderName() {
    return cardHolderName;
  }


  public void setCardHolderName(String cardHolderName) {
    
    
    
    this.cardHolderName = cardHolderName;
  }


  public SuccessfulPaymentResponse customerCode(String customerCode) {
    
    
    
    
    this.customerCode = customerCode;
    return this;
  }

   /**
   * Customer code associated to the transaction
   * @return customerCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CST1010", value = "Customer code associated to the transaction")

  public String getCustomerCode() {
    return customerCode;
  }


  public void setCustomerCode(String customerCode) {
    
    
    
    this.customerCode = customerCode;
  }


  public SuccessfulPaymentResponse invoiceNumber(String invoiceNumber) {
    
    
    
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Invoice number associated to the transaction
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INV2022", value = "Invoice number associated to the transaction")

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  public void setInvoiceNumber(String invoiceNumber) {
    
    
    
    this.invoiceNumber = invoiceNumber;
  }


  public SuccessfulPaymentResponse warning(String warning) {
    
    
    
    
    this.warning = warning;
    return this;
  }

   /**
   * Warnings
   * @return warning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Failed to link customer to invoice", value = "Warnings")

  public String getWarning() {
    return warning;
  }


  public void setWarning(String warning) {
    
    
    
    this.warning = warning;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SuccessfulPaymentResponse instance itself
   */
  public SuccessfulPaymentResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuccessfulPaymentResponse successfulPaymentResponse = (SuccessfulPaymentResponse) o;
    return Objects.equals(this.transactionId, successfulPaymentResponse.transactionId) &&
        Objects.equals(this.cardBatchId, successfulPaymentResponse.cardBatchId) &&
        Objects.equals(this.dateCreated, successfulPaymentResponse.dateCreated) &&
        Objects.equals(this.status, successfulPaymentResponse.status) &&
        Objects.equals(this.user, successfulPaymentResponse.user) &&
        Objects.equals(this.type, successfulPaymentResponse.type) &&
        Objects.equals(this.amount, successfulPaymentResponse.amount) &&
        Objects.equals(this.currency, successfulPaymentResponse.currency) &&
        Objects.equals(this.avsResponse, successfulPaymentResponse.avsResponse) &&
        Objects.equals(this.cvvResponse, successfulPaymentResponse.cvvResponse) &&
        Objects.equals(this.approvalCode, successfulPaymentResponse.approvalCode) &&
        Objects.equals(this.cardToken, successfulPaymentResponse.cardToken) &&
        Objects.equals(this.cardNumber, successfulPaymentResponse.cardNumber) &&
        Objects.equals(this.cardHolderName, successfulPaymentResponse.cardHolderName) &&
        Objects.equals(this.customerCode, successfulPaymentResponse.customerCode) &&
        Objects.equals(this.invoiceNumber, successfulPaymentResponse.invoiceNumber) &&
        Objects.equals(this.warning, successfulPaymentResponse.warning)&&
        Objects.equals(this.additionalProperties, successfulPaymentResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, cardBatchId, dateCreated, status, user, type, amount, currency, avsResponse, cvvResponse, approvalCode, cardToken, cardNumber, cardHolderName, customerCode, invoiceNumber, warning, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuccessfulPaymentResponse {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    cardBatchId: ").append(toIndentedString(cardBatchId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    avsResponse: ").append(toIndentedString(avsResponse)).append("\n");
    sb.append("    cvvResponse: ").append(toIndentedString(cvvResponse)).append("\n");
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    cardToken: ").append(toIndentedString(cardToken)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    cardHolderName: ").append(toIndentedString(cardHolderName)).append("\n");
    sb.append("    customerCode: ").append(toIndentedString(customerCode)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("cardBatchId");
    openapiFields.add("dateCreated");
    openapiFields.add("status");
    openapiFields.add("user");
    openapiFields.add("type");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("avsResponse");
    openapiFields.add("cvvResponse");
    openapiFields.add("approvalCode");
    openapiFields.add("cardToken");
    openapiFields.add("cardNumber");
    openapiFields.add("cardHolderName");
    openapiFields.add("customerCode");
    openapiFields.add("invoiceNumber");
    openapiFields.add("warning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SuccessfulPaymentResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SuccessfulPaymentResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuccessfulPaymentResponse is not found in the empty JSON string", SuccessfulPaymentResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("avsResponse") != null && !jsonObj.get("avsResponse").isJsonNull()) && !jsonObj.get("avsResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avsResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avsResponse").toString()));
      }
      if ((jsonObj.get("cvvResponse") != null && !jsonObj.get("cvvResponse").isJsonNull()) && !jsonObj.get("cvvResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvvResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvvResponse").toString()));
      }
      if ((jsonObj.get("approvalCode") != null && !jsonObj.get("approvalCode").isJsonNull()) && !jsonObj.get("approvalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalCode").toString()));
      }
      if ((jsonObj.get("cardToken") != null && !jsonObj.get("cardToken").isJsonNull()) && !jsonObj.get("cardToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardToken").toString()));
      }
      if ((jsonObj.get("cardNumber") != null && !jsonObj.get("cardNumber").isJsonNull()) && !jsonObj.get("cardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumber").toString()));
      }
      if ((jsonObj.get("cardHolderName") != null && !jsonObj.get("cardHolderName").isJsonNull()) && !jsonObj.get("cardHolderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardHolderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardHolderName").toString()));
      }
      if ((jsonObj.get("customerCode") != null && !jsonObj.get("customerCode").isJsonNull()) && !jsonObj.get("customerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerCode").toString()));
      }
      if ((jsonObj.get("invoiceNumber") != null && !jsonObj.get("invoiceNumber").isJsonNull()) && !jsonObj.get("invoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceNumber").toString()));
      }
      if ((jsonObj.get("warning") != null && !jsonObj.get("warning").isJsonNull()) && !jsonObj.get("warning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warning").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuccessfulPaymentResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuccessfulPaymentResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuccessfulPaymentResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuccessfulPaymentResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SuccessfulPaymentResponse>() {
           @Override
           public void write(JsonWriter out, SuccessfulPaymentResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SuccessfulPaymentResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SuccessfulPaymentResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SuccessfulPaymentResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SuccessfulPaymentResponse
  * @throws IOException if the JSON string is invalid with respect to SuccessfulPaymentResponse
  */
  public static SuccessfulPaymentResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuccessfulPaymentResponse.class);
  }

 /**
  * Convert an instance of SuccessfulPaymentResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

