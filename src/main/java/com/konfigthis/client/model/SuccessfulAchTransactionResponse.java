/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SuccessfulAchTransactionResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SuccessfulAchTransactionResponse {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private Double transactionId;

  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private Double batchId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_STATUS_AUTH = "statusAuth";
  @SerializedName(SERIALIZED_NAME_STATUS_AUTH)
  private String statusAuth;

  public static final String SERIALIZED_NAME_STATUS_CLEARING = "statusClearing";
  @SerializedName(SERIALIZED_NAME_STATUS_CLEARING)
  private String statusClearing;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_APPROVAL_CODE = "approvalCode";
  @SerializedName(SERIALIZED_NAME_APPROVAL_CODE)
  private String approvalCode;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NUMBER = "bankAccountNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NUMBER)
  private String bankAccountNumber;

  public static final String SERIALIZED_NAME_BANK_TOKEN = "bankToken";
  @SerializedName(SERIALIZED_NAME_BANK_TOKEN)
  private String bankToken;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public SuccessfulAchTransactionResponse() {
  }

  public SuccessfulAchTransactionResponse transactionId(Double transactionId) {
    
    
    
    
    this.transactionId = transactionId;
    return this;
  }

  public SuccessfulAchTransactionResponse transactionId(Integer transactionId) {
    
    
    
    
    this.transactionId = transactionId.doubleValue();
    return this;
  }

   /**
   * The transaction id
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "The transaction id")

  public Double getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(Double transactionId) {
    
    
    
    this.transactionId = transactionId;
  }


  public SuccessfulAchTransactionResponse batchId(Double batchId) {
    
    
    
    
    this.batchId = batchId;
    return this;
  }

  public SuccessfulAchTransactionResponse batchId(Integer batchId) {
    
    
    
    
    this.batchId = batchId.doubleValue();
    return this;
  }

   /**
   * The id of associated card batch
   * @return batchId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11", value = "The id of associated card batch")

  public Double getBatchId() {
    return batchId;
  }


  public void setBatchId(Double batchId) {
    
    
    
    this.batchId = batchId;
  }


  public SuccessfulAchTransactionResponse dateCreated(String dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * The date(Mountain Time) when the transaction is created.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-01 00:00:00", value = "The date(Mountain Time) when the transaction is created.")

  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public SuccessfulAchTransactionResponse statusAuth(String statusAuth) {
    
    
    
    
    this.statusAuth = statusAuth;
    return this;
  }

   /**
   * The status of the transaction. possible values are APPROVED | DECLINED | IN_PROGRESS | CANCELLED | PENDING
   * @return statusAuth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "APPROVED", value = "The status of the transaction. possible values are APPROVED | DECLINED | IN_PROGRESS | CANCELLED | PENDING")

  public String getStatusAuth() {
    return statusAuth;
  }


  public void setStatusAuth(String statusAuth) {
    
    
    
    this.statusAuth = statusAuth;
  }


  public SuccessfulAchTransactionResponse statusClearing(String statusClearing) {
    
    
    
    
    this.statusClearing = statusClearing;
    return this;
  }

   /**
   * The status of the transaction. possible values are OPENED | CLEARED | REJECTED | CONTESTED | RETURNED
   * @return statusClearing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OPENED", value = "The status of the transaction. possible values are OPENED | CLEARED | REJECTED | CONTESTED | RETURNED")

  public String getStatusClearing() {
    return statusClearing;
  }


  public void setStatusClearing(String statusClearing) {
    
    
    
    this.statusClearing = statusClearing;
  }


  public SuccessfulAchTransactionResponse type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of the transaction. possible values are WITHDRAWAL | DEPOSIT | SETTLE | REVERSE | REFUND
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "WITHDRAWAL", value = "The type of the transaction. possible values are WITHDRAWAL | DEPOSIT | SETTLE | REVERSE | REFUND")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public SuccessfulAchTransactionResponse amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public SuccessfulAchTransactionResponse amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * The amount of processed transaction
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11.99", value = "The amount of processed transaction")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public SuccessfulAchTransactionResponse currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The abbreviation of the transaction&#39;s currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CAD", value = "The abbreviation of the transaction's currency")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public SuccessfulAchTransactionResponse approvalCode(String approvalCode) {
    
    
    
    
    this.approvalCode = approvalCode;
    return this;
  }

   /**
   * Approval Code
   * @return approvalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "HCMAPPRV", value = "Approval Code")

  public String getApprovalCode() {
    return approvalCode;
  }


  public void setApprovalCode(String approvalCode) {
    
    
    
    this.approvalCode = approvalCode;
  }


  public SuccessfulAchTransactionResponse bankAccountNumber(String bankAccountNumber) {
    
    
    
    
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

   /**
   * Bank account number
   * @return bankAccountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A1B2C3D4E5F6G7", value = "Bank account number")

  public String getBankAccountNumber() {
    return bankAccountNumber;
  }


  public void setBankAccountNumber(String bankAccountNumber) {
    
    
    
    this.bankAccountNumber = bankAccountNumber;
  }


  public SuccessfulAchTransactionResponse bankToken(String bankToken) {
    
    
    
    
    this.bankToken = bankToken;
    return this;
  }

   /**
   * Bank Token associated with bankAccount
   * @return bankToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-A1B2C3D4E5F6G7*", value = "Bank Token associated with bankAccount")

  public String getBankToken() {
    return bankToken;
  }


  public void setBankToken(String bankToken) {
    
    
    
    this.bankToken = bankToken;
  }


  public SuccessfulAchTransactionResponse invoiceNumber(String invoiceNumber) {
    
    
    
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Invoice number associated to the transaction
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INV2022", value = "Invoice number associated to the transaction")

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  public void setInvoiceNumber(String invoiceNumber) {
    
    
    
    this.invoiceNumber = invoiceNumber;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SuccessfulAchTransactionResponse instance itself
   */
  public SuccessfulAchTransactionResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuccessfulAchTransactionResponse successfulAchTransactionResponse = (SuccessfulAchTransactionResponse) o;
    return Objects.equals(this.transactionId, successfulAchTransactionResponse.transactionId) &&
        Objects.equals(this.batchId, successfulAchTransactionResponse.batchId) &&
        Objects.equals(this.dateCreated, successfulAchTransactionResponse.dateCreated) &&
        Objects.equals(this.statusAuth, successfulAchTransactionResponse.statusAuth) &&
        Objects.equals(this.statusClearing, successfulAchTransactionResponse.statusClearing) &&
        Objects.equals(this.type, successfulAchTransactionResponse.type) &&
        Objects.equals(this.amount, successfulAchTransactionResponse.amount) &&
        Objects.equals(this.currency, successfulAchTransactionResponse.currency) &&
        Objects.equals(this.approvalCode, successfulAchTransactionResponse.approvalCode) &&
        Objects.equals(this.bankAccountNumber, successfulAchTransactionResponse.bankAccountNumber) &&
        Objects.equals(this.bankToken, successfulAchTransactionResponse.bankToken) &&
        Objects.equals(this.invoiceNumber, successfulAchTransactionResponse.invoiceNumber)&&
        Objects.equals(this.additionalProperties, successfulAchTransactionResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, batchId, dateCreated, statusAuth, statusClearing, type, amount, currency, approvalCode, bankAccountNumber, bankToken, invoiceNumber, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuccessfulAchTransactionResponse {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    statusAuth: ").append(toIndentedString(statusAuth)).append("\n");
    sb.append("    statusClearing: ").append(toIndentedString(statusClearing)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    bankToken: ").append(toIndentedString(bankToken)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionId");
    openapiFields.add("batchId");
    openapiFields.add("dateCreated");
    openapiFields.add("statusAuth");
    openapiFields.add("statusClearing");
    openapiFields.add("type");
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("approvalCode");
    openapiFields.add("bankAccountNumber");
    openapiFields.add("bankToken");
    openapiFields.add("invoiceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SuccessfulAchTransactionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SuccessfulAchTransactionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuccessfulAchTransactionResponse is not found in the empty JSON string", SuccessfulAchTransactionResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("statusAuth") != null && !jsonObj.get("statusAuth").isJsonNull()) && !jsonObj.get("statusAuth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusAuth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusAuth").toString()));
      }
      if ((jsonObj.get("statusClearing") != null && !jsonObj.get("statusClearing").isJsonNull()) && !jsonObj.get("statusClearing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusClearing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusClearing").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("approvalCode") != null && !jsonObj.get("approvalCode").isJsonNull()) && !jsonObj.get("approvalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalCode").toString()));
      }
      if ((jsonObj.get("bankAccountNumber") != null && !jsonObj.get("bankAccountNumber").isJsonNull()) && !jsonObj.get("bankAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountNumber").toString()));
      }
      if ((jsonObj.get("bankToken") != null && !jsonObj.get("bankToken").isJsonNull()) && !jsonObj.get("bankToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankToken").toString()));
      }
      if ((jsonObj.get("invoiceNumber") != null && !jsonObj.get("invoiceNumber").isJsonNull()) && !jsonObj.get("invoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuccessfulAchTransactionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuccessfulAchTransactionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuccessfulAchTransactionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuccessfulAchTransactionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SuccessfulAchTransactionResponse>() {
           @Override
           public void write(JsonWriter out, SuccessfulAchTransactionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SuccessfulAchTransactionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SuccessfulAchTransactionResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SuccessfulAchTransactionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SuccessfulAchTransactionResponse
  * @throws IOException if the JSON string is invalid with respect to SuccessfulAchTransactionResponse
  */
  public static SuccessfulAchTransactionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuccessfulAchTransactionResponse.class);
  }

 /**
  * Convert an instance of SuccessfulAchTransactionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

