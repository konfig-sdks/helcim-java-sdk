/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BankAccountResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BankAccountResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Integer customerId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "dateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private String dateUpdated;

  public static final String SERIALIZED_NAME_DATE_LAST_USED = "dateLastUsed";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_USED)
  private String dateLastUsed;

  public static final String SERIALIZED_NAME_DATE_VERIFIED = "dateVerified";
  @SerializedName(SERIALIZED_NAME_DATE_VERIFIED)
  private String dateVerified;

  public static final String SERIALIZED_NAME_BANK_TOKEN = "bankToken";
  @SerializedName(SERIALIZED_NAME_BANK_TOKEN)
  private String bankToken;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ACCOUNT_CORPORATE = "accountCorporate";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CORPORATE)
  private String accountCorporate;

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private String verified;

  public static final String SERIALIZED_NAME_READY = "ready";
  @SerializedName(SERIALIZED_NAME_READY)
  private String ready;

  public static final String SERIALIZED_NAME_BANK_ID_NUMBER = "bankIdNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ID_NUMBER)
  private String bankIdNumber;

  public static final String SERIALIZED_NAME_TRANSIT_NUMBER = "transitNumber";
  @SerializedName(SERIALIZED_NAME_TRANSIT_NUMBER)
  private String transitNumber;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NUMBER_L4 = "bankAccountNumberL4";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NUMBER_L4)
  private String bankAccountNumberL4;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public BankAccountResponse() {
  }

  public BankAccountResponse id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The id of the bank account.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12312", value = "The id of the bank account.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public BankAccountResponse customerId(Integer customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * The id of the customer owning the bank account.
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2222", value = "The id of the customer owning the bank account.")

  public Integer getCustomerId() {
    return customerId;
  }


  public void setCustomerId(Integer customerId) {
    
    
    
    this.customerId = customerId;
  }


  public BankAccountResponse dateCreated(String dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * The date when the bank account is created.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2025-01-30 13:35:36", value = "The date when the bank account is created.")

  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public BankAccountResponse dateUpdated(String dateUpdated) {
    
    
    
    
    this.dateUpdated = dateUpdated;
    return this;
  }

   /**
   * The date when the bank account last got updated.
   * @return dateUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2025-01-30 13:35:36", value = "The date when the bank account last got updated.")

  public String getDateUpdated() {
    return dateUpdated;
  }


  public void setDateUpdated(String dateUpdated) {
    
    
    
    this.dateUpdated = dateUpdated;
  }


  public BankAccountResponse dateLastUsed(String dateLastUsed) {
    
    
    
    
    this.dateLastUsed = dateLastUsed;
    return this;
  }

   /**
   * The date when the bank account last got used.
   * @return dateLastUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2025-01-30 13:35:36", value = "The date when the bank account last got used.")

  public String getDateLastUsed() {
    return dateLastUsed;
  }


  public void setDateLastUsed(String dateLastUsed) {
    
    
    
    this.dateLastUsed = dateLastUsed;
  }


  public BankAccountResponse dateVerified(String dateVerified) {
    
    
    
    
    this.dateVerified = dateVerified;
    return this;
  }

   /**
   * The date when the bank account is verified.
   * @return dateVerified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2025-01-30 13:35:36", value = "The date when the bank account is verified.")

  public String getDateVerified() {
    return dateVerified;
  }


  public void setDateVerified(String dateVerified) {
    
    
    
    this.dateVerified = dateVerified;
  }


  public BankAccountResponse bankToken(String bankToken) {
    
    
    
    
    this.bankToken = bankToken;
    return this;
  }

   /**
   * The token of the bank account.
   * @return bankToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "JHKJHKLKJLOHKJ876545KJBK", value = "The token of the bank account.")

  public String getBankToken() {
    return bankToken;
  }


  public void setBankToken(String bankToken) {
    
    
    
    this.bankToken = bankToken;
  }


  public BankAccountResponse accountType(String accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * The type of the bank account, such as CHECKING | SAVINGS.
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CHECKING", value = "The type of the bank account, such as CHECKING | SAVINGS.")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    
    
    
    this.accountType = accountType;
  }


  public BankAccountResponse accountCorporate(String accountCorporate) {
    
    
    
    
    this.accountCorporate = accountCorporate;
    return this;
  }

   /**
   * The corporate type of the bank account, such as PERSONAL | CORPORATE.
   * @return accountCorporate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PERSONAL", value = "The corporate type of the bank account, such as PERSONAL | CORPORATE.")

  public String getAccountCorporate() {
    return accountCorporate;
  }


  public void setAccountCorporate(String accountCorporate) {
    
    
    
    this.accountCorporate = accountCorporate;
  }


  public BankAccountResponse verified(String verified) {
    
    
    
    
    this.verified = verified;
    return this;
  }

   /**
   * Verified status of the bank account, 1|0.
   * @return verified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Verified status of the bank account, 1|0.")

  public String getVerified() {
    return verified;
  }


  public void setVerified(String verified) {
    
    
    
    this.verified = verified;
  }


  public BankAccountResponse ready(String ready) {
    
    
    
    
    this.ready = ready;
    return this;
  }

   /**
   * Ready status of the bank account, 1|0.
   * @return ready
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Ready status of the bank account, 1|0.")

  public String getReady() {
    return ready;
  }


  public void setReady(String ready) {
    
    
    
    this.ready = ready;
  }


  public BankAccountResponse bankIdNumber(String bankIdNumber) {
    
    
    
    
    this.bankIdNumber = bankIdNumber;
    return this;
  }

   /**
   * The institution number of Canadian Bank Account that identifies the bank.
   * @return bankIdNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "333", value = "The institution number of Canadian Bank Account that identifies the bank.")

  public String getBankIdNumber() {
    return bankIdNumber;
  }


  public void setBankIdNumber(String bankIdNumber) {
    
    
    
    this.bankIdNumber = bankIdNumber;
  }


  public BankAccountResponse transitNumber(String transitNumber) {
    
    
    
    
    this.transitNumber = transitNumber;
    return this;
  }

   /**
   * The transit number of Canadian Bank Account. Shows which branch you opened your account at.
   * @return transitNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "55555", value = "The transit number of Canadian Bank Account. Shows which branch you opened your account at.")

  public String getTransitNumber() {
    return transitNumber;
  }


  public void setTransitNumber(String transitNumber) {
    
    
    
    this.transitNumber = transitNumber;
  }


  public BankAccountResponse routingNumber(String routingNumber) {
    
    
    
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * The routing number of US Bank Account. Identifies the financial institution on which it was drawn.
   * @return routingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "999999999", value = "The routing number of US Bank Account. Identifies the financial institution on which it was drawn.")

  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    
    
    
    this.routingNumber = routingNumber;
  }


  public BankAccountResponse bankAccountNumberL4(String bankAccountNumberL4) {
    
    
    
    
    this.bankAccountNumberL4 = bankAccountNumberL4;
    return this;
  }

   /**
   * Last 4 digits of the bank account number.
   * @return bankAccountNumberL4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9999", value = "Last 4 digits of the bank account number.")

  public String getBankAccountNumberL4() {
    return bankAccountNumberL4;
  }


  public void setBankAccountNumberL4(String bankAccountNumberL4) {
    
    
    
    this.bankAccountNumberL4 = bankAccountNumberL4;
  }


  public BankAccountResponse address(Address address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    
    
    
    this.address = address;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BankAccountResponse instance itself
   */
  public BankAccountResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankAccountResponse bankAccountResponse = (BankAccountResponse) o;
    return Objects.equals(this.id, bankAccountResponse.id) &&
        Objects.equals(this.customerId, bankAccountResponse.customerId) &&
        Objects.equals(this.dateCreated, bankAccountResponse.dateCreated) &&
        Objects.equals(this.dateUpdated, bankAccountResponse.dateUpdated) &&
        Objects.equals(this.dateLastUsed, bankAccountResponse.dateLastUsed) &&
        Objects.equals(this.dateVerified, bankAccountResponse.dateVerified) &&
        Objects.equals(this.bankToken, bankAccountResponse.bankToken) &&
        Objects.equals(this.accountType, bankAccountResponse.accountType) &&
        Objects.equals(this.accountCorporate, bankAccountResponse.accountCorporate) &&
        Objects.equals(this.verified, bankAccountResponse.verified) &&
        Objects.equals(this.ready, bankAccountResponse.ready) &&
        Objects.equals(this.bankIdNumber, bankAccountResponse.bankIdNumber) &&
        Objects.equals(this.transitNumber, bankAccountResponse.transitNumber) &&
        Objects.equals(this.routingNumber, bankAccountResponse.routingNumber) &&
        Objects.equals(this.bankAccountNumberL4, bankAccountResponse.bankAccountNumberL4) &&
        Objects.equals(this.address, bankAccountResponse.address)&&
        Objects.equals(this.additionalProperties, bankAccountResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, customerId, dateCreated, dateUpdated, dateLastUsed, dateVerified, bankToken, accountType, accountCorporate, verified, ready, bankIdNumber, transitNumber, routingNumber, bankAccountNumberL4, address, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankAccountResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    dateLastUsed: ").append(toIndentedString(dateLastUsed)).append("\n");
    sb.append("    dateVerified: ").append(toIndentedString(dateVerified)).append("\n");
    sb.append("    bankToken: ").append(toIndentedString(bankToken)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    accountCorporate: ").append(toIndentedString(accountCorporate)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    ready: ").append(toIndentedString(ready)).append("\n");
    sb.append("    bankIdNumber: ").append(toIndentedString(bankIdNumber)).append("\n");
    sb.append("    transitNumber: ").append(toIndentedString(transitNumber)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    bankAccountNumberL4: ").append(toIndentedString(bankAccountNumberL4)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("customerId");
    openapiFields.add("dateCreated");
    openapiFields.add("dateUpdated");
    openapiFields.add("dateLastUsed");
    openapiFields.add("dateVerified");
    openapiFields.add("bankToken");
    openapiFields.add("accountType");
    openapiFields.add("accountCorporate");
    openapiFields.add("verified");
    openapiFields.add("ready");
    openapiFields.add("bankIdNumber");
    openapiFields.add("transitNumber");
    openapiFields.add("routingNumber");
    openapiFields.add("bankAccountNumberL4");
    openapiFields.add("address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BankAccountResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BankAccountResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankAccountResponse is not found in the empty JSON string", BankAccountResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateUpdated") != null && !jsonObj.get("dateUpdated").isJsonNull()) && !jsonObj.get("dateUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateUpdated").toString()));
      }
      if ((jsonObj.get("dateLastUsed") != null && !jsonObj.get("dateLastUsed").isJsonNull()) && !jsonObj.get("dateLastUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateLastUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateLastUsed").toString()));
      }
      if ((jsonObj.get("dateVerified") != null && !jsonObj.get("dateVerified").isJsonNull()) && !jsonObj.get("dateVerified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateVerified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateVerified").toString()));
      }
      if ((jsonObj.get("bankToken") != null && !jsonObj.get("bankToken").isJsonNull()) && !jsonObj.get("bankToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankToken").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if ((jsonObj.get("accountCorporate") != null && !jsonObj.get("accountCorporate").isJsonNull()) && !jsonObj.get("accountCorporate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCorporate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCorporate").toString()));
      }
      if ((jsonObj.get("verified") != null && !jsonObj.get("verified").isJsonNull()) && !jsonObj.get("verified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verified").toString()));
      }
      if ((jsonObj.get("ready") != null && !jsonObj.get("ready").isJsonNull()) && !jsonObj.get("ready").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ready` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ready").toString()));
      }
      if ((jsonObj.get("bankIdNumber") != null && !jsonObj.get("bankIdNumber").isJsonNull()) && !jsonObj.get("bankIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankIdNumber").toString()));
      }
      if ((jsonObj.get("transitNumber") != null && !jsonObj.get("transitNumber").isJsonNull()) && !jsonObj.get("transitNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitNumber").toString()));
      }
      if ((jsonObj.get("routingNumber") != null && !jsonObj.get("routingNumber").isJsonNull()) && !jsonObj.get("routingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingNumber").toString()));
      }
      if ((jsonObj.get("bankAccountNumberL4") != null && !jsonObj.get("bankAccountNumberL4").isJsonNull()) && !jsonObj.get("bankAccountNumberL4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountNumberL4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountNumberL4").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankAccountResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankAccountResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankAccountResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankAccountResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BankAccountResponse>() {
           @Override
           public void write(JsonWriter out, BankAccountResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BankAccountResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BankAccountResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BankAccountResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BankAccountResponse
  * @throws IOException if the JSON string is invalid with respect to BankAccountResponse
  */
  public static BankAccountResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankAccountResponse.class);
  }

 /**
  * Convert an instance of BankAccountResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

