/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Discount;
import com.konfigthis.client.model.LineItem;
import com.konfigthis.client.model.Pickup;
import com.konfigthis.client.model.Shipping;
import com.konfigthis.client.model.Tax;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * To be filled when creating new invoice to be associated to transaction. Will be linked to Customer owning the Card used
 */
@ApiModel(description = "To be filled when creating new invoice to be associated to transaction. Will be linked to Customer owning the Card used")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentRequestInvoice {
  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_TIP_AMOUNT = "tipAmount";
  @SerializedName(SERIALIZED_NAME_TIP_AMOUNT)
  private Double tipAmount;

  public static final String SERIALIZED_NAME_DEPOSIT_AMOUNT = "depositAmount";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_AMOUNT)
  private Double depositAmount;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private Shipping shipping;

  public static final String SERIALIZED_NAME_PICKUP = "pickup";
  @SerializedName(SERIALIZED_NAME_PICKUP)
  private Pickup pickup;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Tax tax;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Discount discount;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = null;

  public PaymentRequestInvoice() {
  }

  public PaymentRequestInvoice invoiceNumber(String invoiceNumber) {
    
    
    
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Invoice number of invoice to be created. Will be generated if blank
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "Invoice number of invoice to be created. Will be generated if blank")

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  public void setInvoiceNumber(String invoiceNumber) {
    
    
    
    this.invoiceNumber = invoiceNumber;
  }


  public PaymentRequestInvoice tipAmount(Double tipAmount) {
    
    
    
    
    this.tipAmount = tipAmount;
    return this;
  }

  public PaymentRequestInvoice tipAmount(Integer tipAmount) {
    
    
    
    
    this.tipAmount = tipAmount.doubleValue();
    return this;
  }

   /**
   * Tip amount
   * @return tipAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.99", value = "Tip amount")

  public Double getTipAmount() {
    return tipAmount;
  }


  public void setTipAmount(Double tipAmount) {
    
    
    
    this.tipAmount = tipAmount;
  }


  public PaymentRequestInvoice depositAmount(Double depositAmount) {
    
    
    
    
    this.depositAmount = depositAmount;
    return this;
  }

  public PaymentRequestInvoice depositAmount(Integer depositAmount) {
    
    
    
    
    this.depositAmount = depositAmount.doubleValue();
    return this;
  }

   /**
   * Deposit amount
   * @return depositAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Deposit amount")

  public Double getDepositAmount() {
    return depositAmount;
  }


  public void setDepositAmount(Double depositAmount) {
    
    
    
    this.depositAmount = depositAmount;
  }


  public PaymentRequestInvoice notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Comment to appear at the bottom of the invoice, visible to the customer.
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "No vegetables please", value = "Comment to appear at the bottom of the invoice, visible to the customer.")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public PaymentRequestInvoice shipping(Shipping shipping) {
    
    
    
    
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Shipping getShipping() {
    return shipping;
  }


  public void setShipping(Shipping shipping) {
    
    
    
    this.shipping = shipping;
  }


  public PaymentRequestInvoice pickup(Pickup pickup) {
    
    
    
    
    this.pickup = pickup;
    return this;
  }

   /**
   * Get pickup
   * @return pickup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Pickup getPickup() {
    return pickup;
  }


  public void setPickup(Pickup pickup) {
    
    
    
    this.pickup = pickup;
  }


  public PaymentRequestInvoice tax(Tax tax) {
    
    
    
    
    this.tax = tax;
    return this;
  }

   /**
   * Get tax
   * @return tax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Tax getTax() {
    return tax;
  }


  public void setTax(Tax tax) {
    
    
    
    this.tax = tax;
  }


  public PaymentRequestInvoice discount(Discount discount) {
    
    
    
    
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Discount getDiscount() {
    return discount;
  }


  public void setDiscount(Discount discount) {
    
    
    
    this.discount = discount;
  }


  public PaymentRequestInvoice lineItems(List<LineItem> lineItems) {
    
    
    
    
    this.lineItems = lineItems;
    return this;
  }

  public PaymentRequestInvoice addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

   /**
   * Get lineItems
   * @return lineItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<LineItem> getLineItems() {
    return lineItems;
  }


  public void setLineItems(List<LineItem> lineItems) {
    
    
    
    this.lineItems = lineItems;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentRequestInvoice instance itself
   */
  public PaymentRequestInvoice putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentRequestInvoice paymentRequestInvoice = (PaymentRequestInvoice) o;
    return Objects.equals(this.invoiceNumber, paymentRequestInvoice.invoiceNumber) &&
        Objects.equals(this.tipAmount, paymentRequestInvoice.tipAmount) &&
        Objects.equals(this.depositAmount, paymentRequestInvoice.depositAmount) &&
        Objects.equals(this.notes, paymentRequestInvoice.notes) &&
        Objects.equals(this.shipping, paymentRequestInvoice.shipping) &&
        Objects.equals(this.pickup, paymentRequestInvoice.pickup) &&
        Objects.equals(this.tax, paymentRequestInvoice.tax) &&
        Objects.equals(this.discount, paymentRequestInvoice.discount) &&
        Objects.equals(this.lineItems, paymentRequestInvoice.lineItems)&&
        Objects.equals(this.additionalProperties, paymentRequestInvoice.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invoiceNumber, tipAmount, depositAmount, notes, shipping, pickup, tax, discount, lineItems, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentRequestInvoice {\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    tipAmount: ").append(toIndentedString(tipAmount)).append("\n");
    sb.append("    depositAmount: ").append(toIndentedString(depositAmount)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    pickup: ").append(toIndentedString(pickup)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("invoiceNumber");
    openapiFields.add("tipAmount");
    openapiFields.add("depositAmount");
    openapiFields.add("notes");
    openapiFields.add("shipping");
    openapiFields.add("pickup");
    openapiFields.add("tax");
    openapiFields.add("discount");
    openapiFields.add("lineItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentRequestInvoice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentRequestInvoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentRequestInvoice is not found in the empty JSON string", PaymentRequestInvoice.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("invoiceNumber") != null && !jsonObj.get("invoiceNumber").isJsonNull()) && !jsonObj.get("invoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceNumber").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        Shipping.validateJsonObject(jsonObj.getAsJsonObject("shipping"));
      }
      // validate the optional field `pickup`
      if (jsonObj.get("pickup") != null && !jsonObj.get("pickup").isJsonNull()) {
        Pickup.validateJsonObject(jsonObj.getAsJsonObject("pickup"));
      }
      // validate the optional field `tax`
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        Tax.validateJsonObject(jsonObj.getAsJsonObject("tax"));
      }
      // validate the optional field `discount`
      if (jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) {
        Discount.validateJsonObject(jsonObj.getAsJsonObject("discount"));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonObject(jsonArraylineItems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentRequestInvoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentRequestInvoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentRequestInvoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentRequestInvoice.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentRequestInvoice>() {
           @Override
           public void write(JsonWriter out, PaymentRequestInvoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentRequestInvoice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentRequestInvoice instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentRequestInvoice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentRequestInvoice
  * @throws IOException if the JSON string is invalid with respect to PaymentRequestInvoice
  */
  public static PaymentRequestInvoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentRequestInvoice.class);
  }

 /**
  * Convert an instance of PaymentRequestInvoice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

