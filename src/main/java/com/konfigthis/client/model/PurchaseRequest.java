/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.PaymentRequestInvoice;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PurchaseRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PurchaseRequest {
  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_ECOMMERCE = "ecommerce";
  @SerializedName(SERIALIZED_NAME_ECOMMERCE)
  private Boolean ecommerce;

  public static final String SERIALIZED_NAME_TERMINAL_ID = "terminalId";
  @SerializedName(SERIALIZED_NAME_TERMINAL_ID)
  private Integer terminalId;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CUSTOMER_CODE = "customerCode";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CODE)
  private String customerCode;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private PaymentRequestInvoice invoice;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_CARD_DATA = "cardData";
  @SerializedName(SERIALIZED_NAME_CARD_DATA)
  private Object cardData = null;

  public PurchaseRequest() {
  }

  public PurchaseRequest ipAddress(String ipAddress) {
    
    
    
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP address of the customer making the transaction, used as part of fraud detection.
   * @return ipAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "192.168.1.1", required = true, value = "IP address of the customer making the transaction, used as part of fraud detection.")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    
    
    
    this.ipAddress = ipAddress;
  }


  public PurchaseRequest ecommerce(Boolean ecommerce) {
    
    
    
    
    this.ecommerce = ecommerce;
    return this;
  }

   /**
   * Set to indicate that the transaction is e-commerce. When set, the Helcim Fraud Defender will provide further analysis.
   * @return ecommerce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Set to indicate that the transaction is e-commerce. When set, the Helcim Fraud Defender will provide further analysis.")

  public Boolean getEcommerce() {
    return ecommerce;
  }


  public void setEcommerce(Boolean ecommerce) {
    
    
    
    this.ecommerce = ecommerce;
  }


  public PurchaseRequest terminalId(Integer terminalId) {
    
    
    
    
    this.terminalId = terminalId;
    return this;
  }

   /**
   * For card transactions only. Id of the terminal you would want to use. Default terminal for of the currency will be used if you dont send this.
   * @return terminalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3215", value = "For card transactions only. Id of the terminal you would want to use. Default terminal for of the currency will be used if you dont send this.")

  public Integer getTerminalId() {
    return terminalId;
  }


  public void setTerminalId(Integer terminalId) {
    
    
    
    this.terminalId = terminalId;
  }


  public PurchaseRequest currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * The currency abbreviation of the invoice, such as CAD or USD. This should match currency of existing invoice.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CAD", required = true, value = "The currency abbreviation of the invoice, such as CAD or USD. This should match currency of existing invoice.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public PurchaseRequest amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public PurchaseRequest amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * Amount to be processed
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "100.99", required = true, value = "Amount to be processed")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public PurchaseRequest customerCode(String customerCode) {
    
    
    
    
    this.customerCode = customerCode;
    return this;
  }

   /**
   * Existing customer code associated with the transaction
   * @return customerCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "Existing customer code associated with the transaction")

  public String getCustomerCode() {
    return customerCode;
  }


  public void setCustomerCode(String customerCode) {
    
    
    
    this.customerCode = customerCode;
  }


  public PurchaseRequest invoiceNumber(String invoiceNumber) {
    
    
    
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * To be filled when associating transaction to existing invoice. Invoice should be associated to the same customer linked to the card
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "To be filled when associating transaction to existing invoice. Invoice should be associated to the same customer linked to the card")

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  public void setInvoiceNumber(String invoiceNumber) {
    
    
    
    this.invoiceNumber = invoiceNumber;
  }


  public PurchaseRequest invoice(PaymentRequestInvoice invoice) {
    
    
    
    
    this.invoice = invoice;
    return this;
  }

   /**
   * Get invoice
   * @return invoice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentRequestInvoice getInvoice() {
    return invoice;
  }


  public void setInvoice(PaymentRequestInvoice invoice) {
    
    
    
    this.invoice = invoice;
  }


  public PurchaseRequest billingAddress(Address billingAddress) {
    
    
    
    
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getBillingAddress() {
    return billingAddress;
  }


  public void setBillingAddress(Address billingAddress) {
    
    
    
    this.billingAddress = billingAddress;
  }


  public PurchaseRequest cardData(Object cardData) {
    
    
    
    
    this.cardData = cardData;
    return this;
  }

   /**
   * Get cardData
   * @return cardData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getCardData() {
    return cardData;
  }


  public void setCardData(Object cardData) {
    
    
    
    this.cardData = cardData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PurchaseRequest instance itself
   */
  public PurchaseRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseRequest purchaseRequest = (PurchaseRequest) o;
    return Objects.equals(this.ipAddress, purchaseRequest.ipAddress) &&
        Objects.equals(this.ecommerce, purchaseRequest.ecommerce) &&
        Objects.equals(this.terminalId, purchaseRequest.terminalId) &&
        Objects.equals(this.currency, purchaseRequest.currency) &&
        Objects.equals(this.amount, purchaseRequest.amount) &&
        Objects.equals(this.customerCode, purchaseRequest.customerCode) &&
        Objects.equals(this.invoiceNumber, purchaseRequest.invoiceNumber) &&
        Objects.equals(this.invoice, purchaseRequest.invoice) &&
        Objects.equals(this.billingAddress, purchaseRequest.billingAddress) &&
        Objects.equals(this.cardData, purchaseRequest.cardData)&&
        Objects.equals(this.additionalProperties, purchaseRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipAddress, ecommerce, terminalId, currency, amount, customerCode, invoiceNumber, invoice, billingAddress, cardData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseRequest {\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    ecommerce: ").append(toIndentedString(ecommerce)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    customerCode: ").append(toIndentedString(customerCode)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    cardData: ").append(toIndentedString(cardData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipAddress");
    openapiFields.add("ecommerce");
    openapiFields.add("terminalId");
    openapiFields.add("currency");
    openapiFields.add("amount");
    openapiFields.add("customerCode");
    openapiFields.add("invoiceNumber");
    openapiFields.add("invoice");
    openapiFields.add("billingAddress");
    openapiFields.add("cardData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ipAddress");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("cardData");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PurchaseRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PurchaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseRequest is not found in the empty JSON string", PurchaseRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PurchaseRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("customerCode") != null && !jsonObj.get("customerCode").isJsonNull()) && !jsonObj.get("customerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerCode").toString()));
      }
      if ((jsonObj.get("invoiceNumber") != null && !jsonObj.get("invoiceNumber").isJsonNull()) && !jsonObj.get("invoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceNumber").toString()));
      }
      // validate the optional field `invoice`
      if (jsonObj.get("invoice") != null && !jsonObj.get("invoice").isJsonNull()) {
        PaymentRequestInvoice.validateJsonObject(jsonObj.getAsJsonObject("invoice"));
      }
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("billingAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseRequest>() {
           @Override
           public void write(JsonWriter out, PurchaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PurchaseRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PurchaseRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PurchaseRequest
  * @throws IOException if the JSON string is invalid with respect to PurchaseRequest
  */
  public static PurchaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseRequest.class);
  }

 /**
  * Convert an instance of PurchaseRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

