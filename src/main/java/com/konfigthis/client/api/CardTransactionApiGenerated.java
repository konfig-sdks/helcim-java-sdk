/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FailedPaymentResponse;
import com.konfigthis.client.model.SuccessfulPaymentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CardTransactionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardTransactionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CardTransactionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiAccessAuth() == null) {
            throw new IllegalArgumentException("\"api-token\" is required but no API key was provided. Please set \"api-token\" with ApiClient#setApiAccessAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call collectTransactionsCall(String dateFrom, String dateTo, String search, String customerCode, String invoiceNumber, String cardToken, Integer cardBatchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card-transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (customerCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerCode", customerCode));
        }

        if (invoiceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceNumber", invoiceNumber));
        }

        if (cardToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardToken", cardToken));
        }

        if (cardBatchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardBatchId", cardBatchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectTransactionsValidateBeforeCall(String dateFrom, String dateTo, String search, String customerCode, String invoiceNumber, String cardToken, Integer cardBatchId, final ApiCallback _callback) throws ApiException {
        return collectTransactionsCall(dateFrom, dateTo, search, customerCode, invoiceNumber, cardToken, cardBatchId, _callback);

    }


    private ApiResponse<List<SuccessfulPaymentResponse>> collectTransactionsWithHttpInfo(String dateFrom, String dateTo, String search, String customerCode, String invoiceNumber, String cardToken, Integer cardBatchId) throws ApiException {
        okhttp3.Call localVarCall = collectTransactionsValidateBeforeCall(dateFrom, dateTo, search, customerCode, invoiceNumber, cardToken, cardBatchId, null);
        Type localVarReturnType = new TypeToken<List<SuccessfulPaymentResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call collectTransactionsAsync(String dateFrom, String dateTo, String search, String customerCode, String invoiceNumber, String cardToken, Integer cardBatchId, final ApiCallback<List<SuccessfulPaymentResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectTransactionsValidateBeforeCall(dateFrom, dateTo, search, customerCode, invoiceNumber, cardToken, cardBatchId, _callback);
        Type localVarReturnType = new TypeToken<List<SuccessfulPaymentResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CollectTransactionsRequestBuilder {
        private String dateFrom;
        private String dateTo;
        private String search;
        private String customerCode;
        private String invoiceNumber;
        private String cardToken;
        private Integer cardBatchId;

        private CollectTransactionsRequestBuilder() {
        }

        /**
         * Set dateFrom
         * @param dateFrom Filters transactions created from 2020-01-01 (Mountain Time) (optional)
         * @return CollectTransactionsRequestBuilder
         */
        public CollectTransactionsRequestBuilder dateFrom(String dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo Filters transactions created until 2021-01-01 (Mountain Time) (optional)
         * @return CollectTransactionsRequestBuilder
         */
        public CollectTransactionsRequestBuilder dateTo(String dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Set search
         * @param search Searches amount, card number(F4L4 only), cardholder name, &amp; approval codes (optional)
         * @return CollectTransactionsRequestBuilder
         */
        public CollectTransactionsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set customerCode
         * @param customerCode The code of the customer associated with the transaction (optional)
         * @return CollectTransactionsRequestBuilder
         */
        public CollectTransactionsRequestBuilder customerCode(String customerCode) {
            this.customerCode = customerCode;
            return this;
        }
        
        /**
         * Set invoiceNumber
         * @param invoiceNumber The number of the invoice associated with the transaction (optional)
         * @return CollectTransactionsRequestBuilder
         */
        public CollectTransactionsRequestBuilder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        
        /**
         * Set cardToken
         * @param cardToken The token of the card associated with the transaction (optional)
         * @return CollectTransactionsRequestBuilder
         */
        public CollectTransactionsRequestBuilder cardToken(String cardToken) {
            this.cardToken = cardToken;
            return this;
        }
        
        /**
         * Set cardBatchId
         * @param cardBatchId The id of the batch associated with the transaction (optional)
         * @return CollectTransactionsRequestBuilder
         */
        public CollectTransactionsRequestBuilder cardBatchId(Integer cardBatchId) {
            this.cardBatchId = cardBatchId;
            return this;
        }
        
        /**
         * Build call for collectTransactions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return collectTransactionsCall(dateFrom, dateTo, search, customerCode, invoiceNumber, cardToken, cardBatchId, _callback);
        }


        /**
         * Execute collectTransactions request
         * @return List&lt;SuccessfulPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public List<SuccessfulPaymentResponse> execute() throws ApiException {
            ApiResponse<List<SuccessfulPaymentResponse>> localVarResp = collectTransactionsWithHttpInfo(dateFrom, dateTo, search, customerCode, invoiceNumber, cardToken, cardBatchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute collectTransactions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;SuccessfulPaymentResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<SuccessfulPaymentResponse>> executeWithHttpInfo() throws ApiException {
            return collectTransactionsWithHttpInfo(dateFrom, dateTo, search, customerCode, invoiceNumber, cardToken, cardBatchId);
        }

        /**
         * Execute collectTransactions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<SuccessfulPaymentResponse>> _callback) throws ApiException {
            return collectTransactionsAsync(dateFrom, dateTo, search, customerCode, invoiceNumber, cardToken, cardBatchId, _callback);
        }
    }

    /**
     * Collects up to 1000 Card Transactions
     * 
     * @return CollectTransactionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public CollectTransactionsRequestBuilder collectTransactions() throws IllegalArgumentException {
        return new CollectTransactionsRequestBuilder();
    }
    private okhttp3.Call getByIdCall(Integer cardTransactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card-transactions/{cardTransactionId}"
            .replace("{" + "cardTransactionId" + "}", localVarApiClient.escapeString(cardTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer cardTransactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardTransactionId' is set
        if (cardTransactionId == null) {
            throw new ApiException("Missing the required parameter 'cardTransactionId' when calling getById(Async)");
        }

        return getByIdCall(cardTransactionId, _callback);

    }


    private ApiResponse<SuccessfulPaymentResponse> getByIdWithHttpInfo(Integer cardTransactionId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(cardTransactionId, null);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer cardTransactionId, final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(cardTransactionId, _callback);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer cardTransactionId;

        private GetByIdRequestBuilder(Integer cardTransactionId) {
            this.cardTransactionId = cardTransactionId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(cardTransactionId, _callback);
        }


        /**
         * Execute getById request
         * @return SuccessfulPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public SuccessfulPaymentResponse execute() throws ApiException {
            ApiResponse<SuccessfulPaymentResponse> localVarResp = getByIdWithHttpInfo(cardTransactionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;SuccessfulPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SuccessfulPaymentResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(cardTransactionId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {
            return getByIdAsync(cardTransactionId, _callback);
        }
    }

    /**
     * Get Card Transaction by id
     * 
     * @param cardTransactionId The Card Transaction Id of the Card Transaction you want to get (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer cardTransactionId) throws IllegalArgumentException {
        if (cardTransactionId == null) throw new IllegalArgumentException("\"cardTransactionId\" is required but got null");
        return new GetByIdRequestBuilder(cardTransactionId);
    }
}
