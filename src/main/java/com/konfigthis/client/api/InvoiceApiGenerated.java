/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.CreateInvoice200Response;
import com.konfigthis.client.model.CreateInvoiceRequest;
import com.konfigthis.client.model.Discount;
import com.konfigthis.client.model.FailedPaymentResponse;
import com.konfigthis.client.model.GetInvoice200Response;
import com.konfigthis.client.model.GetInvoices200ResponseInner;
import com.konfigthis.client.model.LineItem;
import com.konfigthis.client.model.Pickup;
import com.konfigthis.client.model.Shipping;
import com.konfigthis.client.model.Tax;
import com.konfigthis.client.model.UpdateInvoiceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvoiceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoiceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiAccessAuth() == null) {
            throw new IllegalArgumentException("\"api-token\" is required but no API key was provided. Please set \"api-token\" with ApiClient#setApiAccessAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCall(CreateInvoiceRequest createInvoiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInvoiceRequest;

        // create path and map variables
        String localVarPath = "/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(CreateInvoiceRequest createInvoiceRequest, final ApiCallback _callback) throws ApiException {
        return createNewCall(createInvoiceRequest, _callback);

    }


    private ApiResponse<CreateInvoice200Response> createNewWithHttpInfo(CreateInvoiceRequest createInvoiceRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(createInvoiceRequest, null);
        Type localVarReturnType = new TypeToken<CreateInvoice200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(CreateInvoiceRequest createInvoiceRequest, final ApiCallback<CreateInvoice200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(createInvoiceRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateInvoice200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private String invoiceNumber;
        private Double tipAmount;
        private Double depositAmount;
        private String notes;
        private Integer customerId;
        private String currency;
        private String type;
        private String status;
        private Address billingAddress;
        private Shipping shipping;
        private Pickup pickup;
        private Tax tax;
        private Discount discount;
        private List<LineItem> lineItems;

        private CreateNewRequestBuilder() {
        }

        /**
         * Set invoiceNumber
         * @param invoiceNumber Invoice number of invoice to be created. Will be generated if blank (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        
        /**
         * Set tipAmount
         * @param tipAmount Tip amount (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder tipAmount(Double tipAmount) {
            this.tipAmount = tipAmount;
            return this;
        }
        
        /**
         * Set depositAmount
         * @param depositAmount Deposit amount (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder depositAmount(Double depositAmount) {
            this.depositAmount = depositAmount;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Comment to appear at the bottom of the invoice, visible to the customer. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId Unique customer Id. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder customerId(Integer customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set currency
         * @param currency The currency abbreviation of the invoice, such as CAD or USD. This should match currency of existing invoice. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of the invoice, such as ESTIMATE | INVOICE | QUOTE | ORDER | PURCHASE_ORDER | STATEMENT | REGISTRATION | CREDIT. (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of invoice, such as DUE | SHIPPED | COMPLETED | CANCELLED (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set shipping
         * @param shipping  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder shipping(Shipping shipping) {
            this.shipping = shipping;
            return this;
        }
        
        /**
         * Set pickup
         * @param pickup  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder pickup(Pickup pickup) {
            this.pickup = pickup;
            return this;
        }
        
        /**
         * Set tax
         * @param tax  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder tax(Tax tax) {
            this.tax = tax;
            return this;
        }
        
        /**
         * Set discount
         * @param discount  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder discount(Discount discount) {
            this.discount = discount;
            return this;
        }
        
        /**
         * Set lineItems
         * @param lineItems  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder lineItems(List<LineItem> lineItems) {
            this.lineItems = lineItems;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateInvoiceRequest createInvoiceRequest = buildBodyParams();
            return createNewCall(createInvoiceRequest, _callback);
        }

        private CreateInvoiceRequest buildBodyParams() {
            CreateInvoiceRequest createInvoiceRequest = new CreateInvoiceRequest();
            return createInvoiceRequest;
        }

        /**
         * Execute createNew request
         * @return CreateInvoice200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public CreateInvoice200Response execute() throws ApiException {
            CreateInvoiceRequest createInvoiceRequest = buildBodyParams();
            ApiResponse<CreateInvoice200Response> localVarResp = createNewWithHttpInfo(createInvoiceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;CreateInvoice200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateInvoice200Response> executeWithHttpInfo() throws ApiException {
            CreateInvoiceRequest createInvoiceRequest = buildBodyParams();
            return createNewWithHttpInfo(createInvoiceRequest);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateInvoice200Response> _callback) throws ApiException {
            CreateInvoiceRequest createInvoiceRequest = buildBodyParams();
            return createNewAsync(createInvoiceRequest, _callback);
        }
    }

    /**
     * Create invoice
     * 
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew() throws IllegalArgumentException {
        return new CreateNewRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{invoiceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getById(Async)");
        }

        return getByIdCall(invoiceId, _callback);

    }


    private ApiResponse<GetInvoice200Response> getByIdWithHttpInfo(String invoiceId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<GetInvoice200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String invoiceId, final ApiCallback<GetInvoice200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<GetInvoice200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String invoiceId;

        private GetByIdRequestBuilder(String invoiceId) {
            this.invoiceId = invoiceId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(invoiceId, _callback);
        }


        /**
         * Execute getById request
         * @return GetInvoice200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public GetInvoice200Response execute() throws ApiException {
            ApiResponse<GetInvoice200Response> localVarResp = getByIdWithHttpInfo(invoiceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;GetInvoice200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetInvoice200Response> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(invoiceId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetInvoice200Response> _callback) throws ApiException {
            return getByIdAsync(invoiceId, _callback);
        }
    }

    /**
     * Get invoice
     * 
     * @param invoiceId The unique invoice Id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String invoiceId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new GetByIdRequestBuilder(invoiceId);
    }
    private okhttp3.Call listCall(String invoiceNumber, String dateStart, String dateEnd, Integer withConvenienceFee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (invoiceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceNumber", invoiceNumber));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateEnd", dateEnd));
        }

        if (withConvenienceFee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withConvenienceFee", withConvenienceFee));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String invoiceNumber, String dateStart, String dateEnd, Integer withConvenienceFee, final ApiCallback _callback) throws ApiException {
        return listCall(invoiceNumber, dateStart, dateEnd, withConvenienceFee, _callback);

    }


    private ApiResponse<List<GetInvoices200ResponseInner>> listWithHttpInfo(String invoiceNumber, String dateStart, String dateEnd, Integer withConvenienceFee) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(invoiceNumber, dateStart, dateEnd, withConvenienceFee, null);
        Type localVarReturnType = new TypeToken<List<GetInvoices200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String invoiceNumber, String dateStart, String dateEnd, Integer withConvenienceFee, final ApiCallback<List<GetInvoices200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(invoiceNumber, dateStart, dateEnd, withConvenienceFee, _callback);
        Type localVarReturnType = new TypeToken<List<GetInvoices200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String invoiceNumber;
        private String dateStart;
        private String dateEnd;
        private Integer withConvenienceFee;

        private ListRequestBuilder() {
        }

        /**
         * Set invoiceNumber
         * @param invoiceNumber The number of the invoice associated with the transaction (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        
        /**
         * Set dateStart
         * @param dateStart Filters transactions created from 2020-01-01 (Mountain Time) (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder dateStart(String dateStart) {
            this.dateStart = dateStart;
            return this;
        }
        
        /**
         * Set dateEnd
         * @param dateEnd Filters transactions created until 2021-01-01 (Mountain Time) (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder dateEnd(String dateEnd) {
            this.dateEnd = dateEnd;
            return this;
        }
        
        /**
         * Set withConvenienceFee
         * @param withConvenienceFee Include convenience fee of each invoice 0 | 1 (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder withConvenienceFee(Integer withConvenienceFee) {
            this.withConvenienceFee = withConvenienceFee;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(invoiceNumber, dateStart, dateEnd, withConvenienceFee, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;GetInvoices200ResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public List<GetInvoices200ResponseInner> execute() throws ApiException {
            ApiResponse<List<GetInvoices200ResponseInner>> localVarResp = listWithHttpInfo(invoiceNumber, dateStart, dateEnd, withConvenienceFee);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;GetInvoices200ResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<GetInvoices200ResponseInner>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(invoiceNumber, dateStart, dateEnd, withConvenienceFee);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<GetInvoices200ResponseInner>> _callback) throws ApiException {
            return listAsync(invoiceNumber, dateStart, dateEnd, withConvenienceFee, _callback);
        }
    }

    /**
     * Get invoices
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateDetailsCall(String invoiceId, UpdateInvoiceRequest updateInvoiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateInvoiceRequest;

        // create path and map variables
        String localVarPath = "/invoices/{invoiceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(String invoiceId, UpdateInvoiceRequest updateInvoiceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling updateDetails(Async)");
        }

        return updateDetailsCall(invoiceId, updateInvoiceRequest, _callback);

    }


    private ApiResponse<GetInvoice200Response> updateDetailsWithHttpInfo(String invoiceId, UpdateInvoiceRequest updateInvoiceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(invoiceId, updateInvoiceRequest, null);
        Type localVarReturnType = new TypeToken<GetInvoice200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDetailsAsync(String invoiceId, UpdateInvoiceRequest updateInvoiceRequest, final ApiCallback<GetInvoice200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(invoiceId, updateInvoiceRequest, _callback);
        Type localVarReturnType = new TypeToken<GetInvoice200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final String invoiceId;
        private String invoiceNumber;
        private Double tipAmount;
        private Double depositAmount;
        private String notes;
        private String currency;
        private String type;
        private String status;
        private Address billingAddress;

        private UpdateDetailsRequestBuilder(String invoiceId) {
            this.invoiceId = invoiceId;
        }

        /**
         * Set invoiceNumber
         * @param invoiceNumber Invoice number of invoice to be created. Will be generated if blank (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        
        /**
         * Set tipAmount
         * @param tipAmount Tip amount (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder tipAmount(Double tipAmount) {
            this.tipAmount = tipAmount;
            return this;
        }
        
        /**
         * Set depositAmount
         * @param depositAmount Deposit amount (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder depositAmount(Double depositAmount) {
            this.depositAmount = depositAmount;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Comment to appear at the bottom of the invoice, visible to the customer. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set currency
         * @param currency The currency abbreviation of the invoice, such as CAD or USD. This should match currency of existing invoice. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set type
         * @param type The type of the invoice, such as ESTIMATE | INVOICE | QUOTE | ORDER | PURCHASE_ORDER | STATEMENT | REGISTRATION | CREDIT. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of invoice, such as DUE | SHIPPED | COMPLETED | CANCELLED (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateInvoiceRequest updateInvoiceRequest = buildBodyParams();
            return updateDetailsCall(invoiceId, updateInvoiceRequest, _callback);
        }

        private UpdateInvoiceRequest buildBodyParams() {
            UpdateInvoiceRequest updateInvoiceRequest = new UpdateInvoiceRequest();
            return updateInvoiceRequest;
        }

        /**
         * Execute updateDetails request
         * @return GetInvoice200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public GetInvoice200Response execute() throws ApiException {
            UpdateInvoiceRequest updateInvoiceRequest = buildBodyParams();
            ApiResponse<GetInvoice200Response> localVarResp = updateDetailsWithHttpInfo(invoiceId, updateInvoiceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;GetInvoice200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetInvoice200Response> executeWithHttpInfo() throws ApiException {
            UpdateInvoiceRequest updateInvoiceRequest = buildBodyParams();
            return updateDetailsWithHttpInfo(invoiceId, updateInvoiceRequest);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetInvoice200Response> _callback) throws ApiException {
            UpdateInvoiceRequest updateInvoiceRequest = buildBodyParams();
            return updateDetailsAsync(invoiceId, updateInvoiceRequest, _callback);
        }
    }

    /**
     * Update invoice
     * 
     * @param invoiceId The unique invoice Id (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(String invoiceId) throws IllegalArgumentException {
        if (invoiceId == null) throw new IllegalArgumentException("\"invoiceId\" is required but got null");
            

        return new UpdateDetailsRequestBuilder(invoiceId);
    }
}
