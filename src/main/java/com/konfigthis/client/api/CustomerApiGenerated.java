/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.BankAccountResponse;
import com.konfigthis.client.model.CardResponse;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.CustomerRequest;
import com.konfigthis.client.model.CustomerUpdateRequest;
import com.konfigthis.client.model.FailedPaymentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiAccessAuth() == null) {
            throw new IllegalArgumentException("\"api-token\" is required but no API key was provided. Please set \"api-token\" with ApiClient#setApiAccessAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCustomerCall(CustomerRequest customerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerRequest;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCustomerValidateBeforeCall(CustomerRequest customerRequest, final ApiCallback _callback) throws ApiException {
        return createNewCustomerCall(customerRequest, _callback);

    }


    private ApiResponse<Customer> createNewCustomerWithHttpInfo(CustomerRequest customerRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewCustomerValidateBeforeCall(customerRequest, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCustomerAsync(CustomerRequest customerRequest, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCustomerValidateBeforeCall(customerRequest, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCustomerRequestBuilder {
        private String customerCode;
        private String contactName;
        private String businessName;
        private String cellPhone;
        private Address billingAddress;
        private Address shippingAddress;

        private CreateNewCustomerRequestBuilder() {
        }

        /**
         * Set customerCode
         * @param customerCode The unique customer code. If blank, it will be automatically generated. (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder customerCode(String customerCode) {
            this.customerCode = customerCode;
            return this;
        }
        
        /**
         * Set contactName
         * @param contactName The primary contact name (full name) of the customer. (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder contactName(String contactName) {
            this.contactName = contactName;
            return this;
        }
        
        /**
         * Set businessName
         * @param businessName The business name of the customer. There must be either a contact name or business name present. (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder businessName(String businessName) {
            this.businessName = businessName;
            return this;
        }
        
        /**
         * Set cellPhone
         * @param cellPhone The cell phone number of the customer. (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder cellPhone(String cellPhone) {
            this.cellPhone = cellPhone;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set shippingAddress
         * @param shippingAddress  (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder shippingAddress(Address shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        
        /**
         * Build call for createNewCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomerRequest customerRequest = buildBodyParams();
            return createNewCustomerCall(customerRequest, _callback);
        }

        private CustomerRequest buildBodyParams() {
            CustomerRequest customerRequest = new CustomerRequest();
            customerRequest.customerCode(this.customerCode);
            customerRequest.contactName(this.contactName);
            customerRequest.businessName(this.businessName);
            customerRequest.cellPhone(this.cellPhone);
            customerRequest.billingAddress(this.billingAddress);
            customerRequest.shippingAddress(this.shippingAddress);
            return customerRequest;
        }

        /**
         * Execute createNewCustomer request
         * @return Customer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public Customer execute() throws ApiException {
            CustomerRequest customerRequest = buildBodyParams();
            ApiResponse<Customer> localVarResp = createNewCustomerWithHttpInfo(customerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewCustomer request with HTTP info returned
         * @return ApiResponse&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customer> executeWithHttpInfo() throws ApiException {
            CustomerRequest customerRequest = buildBodyParams();
            return createNewCustomerWithHttpInfo(customerRequest);
        }

        /**
         * Execute createNewCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customer> _callback) throws ApiException {
            CustomerRequest customerRequest = buildBodyParams();
            return createNewCustomerAsync(customerRequest, _callback);
        }
    }

    /**
     * Create customer
     * 
     * @return CreateNewCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCustomerRequestBuilder createNewCustomer() throws IllegalArgumentException {
        return new CreateNewCustomerRequestBuilder();
    }
    private okhttp3.Call getBankAccountCall(Integer customerId, Integer bankAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/bank-accounts/{bankAccountId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "bankAccountId" + "}", localVarApiClient.escapeString(bankAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankAccountValidateBeforeCall(Integer customerId, Integer bankAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getBankAccount(Async)");
        }

        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getBankAccount(Async)");
        }

        return getBankAccountCall(customerId, bankAccountId, _callback);

    }


    private ApiResponse<List<BankAccountResponse>> getBankAccountWithHttpInfo(Integer customerId, Integer bankAccountId) throws ApiException {
        okhttp3.Call localVarCall = getBankAccountValidateBeforeCall(customerId, bankAccountId, null);
        Type localVarReturnType = new TypeToken<List<BankAccountResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBankAccountAsync(Integer customerId, Integer bankAccountId, final ApiCallback<List<BankAccountResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankAccountValidateBeforeCall(customerId, bankAccountId, _callback);
        Type localVarReturnType = new TypeToken<List<BankAccountResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBankAccountRequestBuilder {
        private final Integer customerId;
        private final Integer bankAccountId;

        private GetBankAccountRequestBuilder(Integer customerId, Integer bankAccountId) {
            this.customerId = customerId;
            this.bankAccountId = bankAccountId;
        }

        /**
         * Build call for getBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBankAccountCall(customerId, bankAccountId, _callback);
        }


        /**
         * Execute getBankAccount request
         * @return List&lt;BankAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public List<BankAccountResponse> execute() throws ApiException {
            ApiResponse<List<BankAccountResponse>> localVarResp = getBankAccountWithHttpInfo(customerId, bankAccountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBankAccount request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BankAccountResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BankAccountResponse>> executeWithHttpInfo() throws ApiException {
            return getBankAccountWithHttpInfo(customerId, bankAccountId);
        }

        /**
         * Execute getBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BankAccountResponse>> _callback) throws ApiException {
            return getBankAccountAsync(customerId, bankAccountId, _callback);
        }
    }

    /**
     * Get customer bank account
     * 
     * @param customerId The Id of the customer (required)
     * @param bankAccountId The Id of the bank account (required)
     * @return GetBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public GetBankAccountRequestBuilder getBankAccount(Integer customerId, Integer bankAccountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
        if (bankAccountId == null) throw new IllegalArgumentException("\"bankAccountId\" is required but got null");
        return new GetBankAccountRequestBuilder(customerId, bankAccountId);
    }
    private okhttp3.Call getBankAccountsCall(Integer customerId, String bankToken, Double verified, Double ready, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/bank-accounts"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bankToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bankToken", bankToken));
        }

        if (verified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verified", verified));
        }

        if (ready != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ready", ready));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankAccountsValidateBeforeCall(Integer customerId, String bankToken, Double verified, Double ready, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getBankAccounts(Async)");
        }

        return getBankAccountsCall(customerId, bankToken, verified, ready, _callback);

    }


    private ApiResponse<List<BankAccountResponse>> getBankAccountsWithHttpInfo(Integer customerId, String bankToken, Double verified, Double ready) throws ApiException {
        okhttp3.Call localVarCall = getBankAccountsValidateBeforeCall(customerId, bankToken, verified, ready, null);
        Type localVarReturnType = new TypeToken<List<BankAccountResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBankAccountsAsync(Integer customerId, String bankToken, Double verified, Double ready, final ApiCallback<List<BankAccountResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankAccountsValidateBeforeCall(customerId, bankToken, verified, ready, _callback);
        Type localVarReturnType = new TypeToken<List<BankAccountResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBankAccountsRequestBuilder {
        private final Integer customerId;
        private String bankToken;
        private Double verified;
        private Double ready;

        private GetBankAccountsRequestBuilder(Integer customerId) {
            this.customerId = customerId;
        }

        /**
         * Set bankToken
         * @param bankToken The bank account token. (optional)
         * @return GetBankAccountsRequestBuilder
         */
        public GetBankAccountsRequestBuilder bankToken(String bankToken) {
            this.bankToken = bankToken;
            return this;
        }
        
        /**
         * Set verified
         * @param verified Check if bank account is verified or not. use 1 or 0. (optional)
         * @return GetBankAccountsRequestBuilder
         */
        public GetBankAccountsRequestBuilder verified(Double verified) {
            this.verified = verified;
            return this;
        }
        
        /**
         * Set ready
         * @param ready Check if bank account is ready or not. use 1 or 0. (optional)
         * @return GetBankAccountsRequestBuilder
         */
        public GetBankAccountsRequestBuilder ready(Double ready) {
            this.ready = ready;
            return this;
        }
        
        /**
         * Build call for getBankAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBankAccountsCall(customerId, bankToken, verified, ready, _callback);
        }


        /**
         * Execute getBankAccounts request
         * @return List&lt;BankAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public List<BankAccountResponse> execute() throws ApiException {
            ApiResponse<List<BankAccountResponse>> localVarResp = getBankAccountsWithHttpInfo(customerId, bankToken, verified, ready);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBankAccounts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BankAccountResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BankAccountResponse>> executeWithHttpInfo() throws ApiException {
            return getBankAccountsWithHttpInfo(customerId, bankToken, verified, ready);
        }

        /**
         * Execute getBankAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BankAccountResponse>> _callback) throws ApiException {
            return getBankAccountsAsync(customerId, bankToken, verified, ready, _callback);
        }
    }

    /**
     * Get customer bank accounts
     * 
     * @param customerId The Id of the customer (required)
     * @return GetBankAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public GetBankAccountsRequestBuilder getBankAccounts(Integer customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
        return new GetBankAccountsRequestBuilder(customerId);
    }
    private okhttp3.Call getCardDetailsCall(Integer customerId, Integer cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/cards/{cardId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardDetailsValidateBeforeCall(Integer customerId, Integer cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCardDetails(Async)");
        }

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getCardDetails(Async)");
        }

        return getCardDetailsCall(customerId, cardId, _callback);

    }


    private ApiResponse<List<CardResponse>> getCardDetailsWithHttpInfo(Integer customerId, Integer cardId) throws ApiException {
        okhttp3.Call localVarCall = getCardDetailsValidateBeforeCall(customerId, cardId, null);
        Type localVarReturnType = new TypeToken<List<CardResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCardDetailsAsync(Integer customerId, Integer cardId, final ApiCallback<List<CardResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardDetailsValidateBeforeCall(customerId, cardId, _callback);
        Type localVarReturnType = new TypeToken<List<CardResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCardDetailsRequestBuilder {
        private final Integer customerId;
        private final Integer cardId;

        private GetCardDetailsRequestBuilder(Integer customerId, Integer cardId) {
            this.customerId = customerId;
            this.cardId = cardId;
        }

        /**
         * Build call for getCardDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardDetailsCall(customerId, cardId, _callback);
        }


        /**
         * Execute getCardDetails request
         * @return List&lt;CardResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public List<CardResponse> execute() throws ApiException {
            ApiResponse<List<CardResponse>> localVarResp = getCardDetailsWithHttpInfo(customerId, cardId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCardDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CardResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CardResponse>> executeWithHttpInfo() throws ApiException {
            return getCardDetailsWithHttpInfo(customerId, cardId);
        }

        /**
         * Execute getCardDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CardResponse>> _callback) throws ApiException {
            return getCardDetailsAsync(customerId, cardId, _callback);
        }
    }

    /**
     * Get customer card
     * 
     * @param customerId The Id of the customer (required)
     * @param cardId The Id of the card (required)
     * @return GetCardDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public GetCardDetailsRequestBuilder getCardDetails(Integer customerId, Integer cardId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
        if (cardId == null) throw new IllegalArgumentException("\"cardId\" is required but got null");
        return new GetCardDetailsRequestBuilder(customerId, cardId);
    }
    private okhttp3.Call getCardsCall(Integer customerId, String cardToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/cards"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cardToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cardToken", cardToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsValidateBeforeCall(Integer customerId, String cardToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCards(Async)");
        }

        return getCardsCall(customerId, cardToken, _callback);

    }


    private ApiResponse<List<CardResponse>> getCardsWithHttpInfo(Integer customerId, String cardToken) throws ApiException {
        okhttp3.Call localVarCall = getCardsValidateBeforeCall(customerId, cardToken, null);
        Type localVarReturnType = new TypeToken<List<CardResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCardsAsync(Integer customerId, String cardToken, final ApiCallback<List<CardResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsValidateBeforeCall(customerId, cardToken, _callback);
        Type localVarReturnType = new TypeToken<List<CardResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCardsRequestBuilder {
        private final Integer customerId;
        private String cardToken;

        private GetCardsRequestBuilder(Integer customerId) {
            this.customerId = customerId;
        }

        /**
         * Set cardToken
         * @param cardToken The card token. (optional)
         * @return GetCardsRequestBuilder
         */
        public GetCardsRequestBuilder cardToken(String cardToken) {
            this.cardToken = cardToken;
            return this;
        }
        
        /**
         * Build call for getCards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardsCall(customerId, cardToken, _callback);
        }


        /**
         * Execute getCards request
         * @return List&lt;CardResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public List<CardResponse> execute() throws ApiException {
            ApiResponse<List<CardResponse>> localVarResp = getCardsWithHttpInfo(customerId, cardToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCards request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CardResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CardResponse>> executeWithHttpInfo() throws ApiException {
            return getCardsWithHttpInfo(customerId, cardToken);
        }

        /**
         * Execute getCards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CardResponse>> _callback) throws ApiException {
            return getCardsAsync(customerId, cardToken, _callback);
        }
    }

    /**
     * Get customer cards
     * 
     * @param customerId The Id of the customer (required)
     * @return GetCardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public GetCardsRequestBuilder getCards(Integer customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
        return new GetCardsRequestBuilder(customerId);
    }
    private okhttp3.Call getCustomerCall(Integer customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerValidateBeforeCall(Integer customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomer(Async)");
        }

        return getCustomerCall(customerId, _callback);

    }


    private ApiResponse<Customer> getCustomerWithHttpInfo(Integer customerId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerAsync(Integer customerId, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerRequestBuilder {
        private final Integer customerId;

        private GetCustomerRequestBuilder(Integer customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerCall(customerId, _callback);
        }


        /**
         * Execute getCustomer request
         * @return Customer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public Customer execute() throws ApiException {
            ApiResponse<Customer> localVarResp = getCustomerWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomer request with HTTP info returned
         * @return ApiResponse&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customer> executeWithHttpInfo() throws ApiException {
            return getCustomerWithHttpInfo(customerId);
        }

        /**
         * Execute getCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customer> _callback) throws ApiException {
            return getCustomerAsync(customerId, _callback);
        }
    }

    /**
     * Get customer
     * 
     * @param customerId The Id of the customer (required)
     * @return GetCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerRequestBuilder getCustomer(Integer customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
        return new GetCustomerRequestBuilder(customerId);
    }
    private okhttp3.Call listCall(String search, String customerCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (customerCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerCode", customerCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String search, String customerCode, final ApiCallback _callback) throws ApiException {
        return listCall(search, customerCode, _callback);

    }


    private ApiResponse<List<Customer>> listWithHttpInfo(String search, String customerCode) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(search, customerCode, null);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String search, String customerCode, final ApiCallback<List<Customer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(search, customerCode, _callback);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String search;
        private String customerCode;

        private ListRequestBuilder() {
        }

        /**
         * Set search
         * @param search The search term to be used for partial matching on contactName, businessName, customerCode, city, phone and email (Only use one query field per request). (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set customerCode
         * @param customerCode Existing customer code (Only use one query field per request). (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder customerCode(String customerCode) {
            this.customerCode = customerCode;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(search, customerCode, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public List<Customer> execute() throws ApiException {
            ApiResponse<List<Customer>> localVarResp = listWithHttpInfo(search, customerCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Customer&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Customer>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(search, customerCode);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Customer>> _callback) throws ApiException {
            return listAsync(search, customerCode, _callback);
        }
    }

    /**
     * Get customers
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call setBankAccountDefaultCall(Integer customerId, Integer bankAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}/bank-accounts/{bankAccountId}/default"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "bankAccountId" + "}", localVarApiClient.escapeString(bankAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setBankAccountDefaultValidateBeforeCall(Integer customerId, Integer bankAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling setBankAccountDefault(Async)");
        }

        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling setBankAccountDefault(Async)");
        }

        return setBankAccountDefaultCall(customerId, bankAccountId, _callback);

    }


    private ApiResponse<List<BankAccountResponse>> setBankAccountDefaultWithHttpInfo(Integer customerId, Integer bankAccountId) throws ApiException {
        okhttp3.Call localVarCall = setBankAccountDefaultValidateBeforeCall(customerId, bankAccountId, null);
        Type localVarReturnType = new TypeToken<List<BankAccountResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setBankAccountDefaultAsync(Integer customerId, Integer bankAccountId, final ApiCallback<List<BankAccountResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setBankAccountDefaultValidateBeforeCall(customerId, bankAccountId, _callback);
        Type localVarReturnType = new TypeToken<List<BankAccountResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetBankAccountDefaultRequestBuilder {
        private final Integer customerId;
        private final Integer bankAccountId;

        private SetBankAccountDefaultRequestBuilder(Integer customerId, Integer bankAccountId) {
            this.customerId = customerId;
            this.bankAccountId = bankAccountId;
        }

        /**
         * Build call for setBankAccountDefault
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setBankAccountDefaultCall(customerId, bankAccountId, _callback);
        }


        /**
         * Execute setBankAccountDefault request
         * @return List&lt;BankAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public List<BankAccountResponse> execute() throws ApiException {
            ApiResponse<List<BankAccountResponse>> localVarResp = setBankAccountDefaultWithHttpInfo(customerId, bankAccountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setBankAccountDefault request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BankAccountResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BankAccountResponse>> executeWithHttpInfo() throws ApiException {
            return setBankAccountDefaultWithHttpInfo(customerId, bankAccountId);
        }

        /**
         * Execute setBankAccountDefault request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BankAccountResponse>> _callback) throws ApiException {
            return setBankAccountDefaultAsync(customerId, bankAccountId, _callback);
        }
    }

    /**
     * Set customer bank account as default
     * 
     * @param customerId The Id of the customer (required)
     * @param bankAccountId The Id of the bank account (required)
     * @return SetBankAccountDefaultRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public SetBankAccountDefaultRequestBuilder setBankAccountDefault(Integer customerId, Integer bankAccountId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
        if (bankAccountId == null) throw new IllegalArgumentException("\"bankAccountId\" is required but got null");
        return new SetBankAccountDefaultRequestBuilder(customerId, bankAccountId);
    }
    private okhttp3.Call updateDetailsCall(String customerId, CustomerUpdateRequest customerUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerUpdateRequest;

        // create path and map variables
        String localVarPath = "/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(String customerId, CustomerUpdateRequest customerUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateDetails(Async)");
        }

        return updateDetailsCall(customerId, customerUpdateRequest, _callback);

    }


    private ApiResponse<Customer> updateDetailsWithHttpInfo(String customerId, CustomerUpdateRequest customerUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(customerId, customerUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDetailsAsync(String customerId, CustomerUpdateRequest customerUpdateRequest, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(customerId, customerUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final String customerId;
        private String customerCode;
        private String contactName;
        private String businessName;
        private String cellPhone;
        private Address billingAddress;
        private Address shippingAddress;

        private UpdateDetailsRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set customerCode
         * @param customerCode The unique customer code. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder customerCode(String customerCode) {
            this.customerCode = customerCode;
            return this;
        }
        
        /**
         * Set contactName
         * @param contactName The primary contact name (full name) of the customer. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder contactName(String contactName) {
            this.contactName = contactName;
            return this;
        }
        
        /**
         * Set businessName
         * @param businessName The business name of the customer. There must be either a contact name or business name present. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder businessName(String businessName) {
            this.businessName = businessName;
            return this;
        }
        
        /**
         * Set cellPhone
         * @param cellPhone The cell phone number of the customer. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder cellPhone(String cellPhone) {
            this.cellPhone = cellPhone;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set shippingAddress
         * @param shippingAddress  (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder shippingAddress(Address shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        
        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomerUpdateRequest customerUpdateRequest = buildBodyParams();
            return updateDetailsCall(customerId, customerUpdateRequest, _callback);
        }

        private CustomerUpdateRequest buildBodyParams() {
            CustomerUpdateRequest customerUpdateRequest = new CustomerUpdateRequest();
            customerUpdateRequest.customerCode(this.customerCode);
            customerUpdateRequest.contactName(this.contactName);
            customerUpdateRequest.businessName(this.businessName);
            customerUpdateRequest.cellPhone(this.cellPhone);
            customerUpdateRequest.billingAddress(this.billingAddress);
            customerUpdateRequest.shippingAddress(this.shippingAddress);
            return customerUpdateRequest;
        }

        /**
         * Execute updateDetails request
         * @return Customer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public Customer execute() throws ApiException {
            CustomerUpdateRequest customerUpdateRequest = buildBodyParams();
            ApiResponse<Customer> localVarResp = updateDetailsWithHttpInfo(customerId, customerUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customer> executeWithHttpInfo() throws ApiException {
            CustomerUpdateRequest customerUpdateRequest = buildBodyParams();
            return updateDetailsWithHttpInfo(customerId, customerUpdateRequest);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customer> _callback) throws ApiException {
            CustomerUpdateRequest customerUpdateRequest = buildBodyParams();
            return updateDetailsAsync(customerId, customerUpdateRequest, _callback);
        }
    }

    /**
     * Update customer
     * 
     * @param customerId The Id of the customer (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new UpdateDetailsRequestBuilder(customerId);
    }
}
