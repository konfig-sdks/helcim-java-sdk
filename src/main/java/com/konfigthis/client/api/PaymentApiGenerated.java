/*
 * The Helcim API
 * This API covers publicly accessible merchant actions
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.CaptureRequest;
import com.konfigthis.client.model.Card;
import com.konfigthis.client.model.FailedPaymentResponse;
import com.konfigthis.client.model.PaymentRequestInvoice;
import com.konfigthis.client.model.PurchaseRequest;
import com.konfigthis.client.model.RefundRequest;
import com.konfigthis.client.model.RefundRequest1;
import com.konfigthis.client.model.SuccessfulAchTransactionResponse;
import com.konfigthis.client.model.SuccessfulPaymentResponse;
import java.util.UUID;
import com.konfigthis.client.model.VerifyRequest;
import com.konfigthis.client.model.VerifyRequestInvoice;
import com.konfigthis.client.model.WithdrawRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiAccessAuth() == null) {
            throw new IllegalArgumentException("\"api-token\" is required but no API key was provided. Please set \"api-token\" with ApiClient#setApiAccessAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call processCaptureTransactionCall(UUID idempotencyKey, CaptureRequest captureRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = captureRequest;

        // create path and map variables
        String localVarPath = "/payment/capture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processCaptureTransactionValidateBeforeCall(UUID idempotencyKey, CaptureRequest captureRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling processCaptureTransaction(Async)");
        }

        return processCaptureTransactionCall(idempotencyKey, captureRequest, _callback);

    }


    private ApiResponse<SuccessfulPaymentResponse> processCaptureTransactionWithHttpInfo(UUID idempotencyKey, CaptureRequest captureRequest) throws ApiException {
        okhttp3.Call localVarCall = processCaptureTransactionValidateBeforeCall(idempotencyKey, captureRequest, null);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processCaptureTransactionAsync(UUID idempotencyKey, CaptureRequest captureRequest, final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processCaptureTransactionValidateBeforeCall(idempotencyKey, captureRequest, _callback);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessCaptureTransactionRequestBuilder {
        private final Integer preAuthTransactionId;
        private final Double amount;
        private final String ipAddress;
        private final UUID idempotencyKey;
        private Boolean ecommerce;

        private ProcessCaptureTransactionRequestBuilder(Integer preAuthTransactionId, double amount, String ipAddress, UUID idempotencyKey) {
            this.preAuthTransactionId = preAuthTransactionId;
            this.amount = amount;
            this.ipAddress = ipAddress;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set ecommerce
         * @param ecommerce Set to indicate that the transaction is e-commerce. When set, the Helcim Fraud Defender will provide further analysis. (optional)
         * @return ProcessCaptureTransactionRequestBuilder
         */
        public ProcessCaptureTransactionRequestBuilder ecommerce(Boolean ecommerce) {
            this.ecommerce = ecommerce;
            return this;
        }
        
        /**
         * Build call for processCaptureTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CaptureRequest captureRequest = buildBodyParams();
            return processCaptureTransactionCall(idempotencyKey, captureRequest, _callback);
        }

        private CaptureRequest buildBodyParams() {
            CaptureRequest captureRequest = new CaptureRequest();
            captureRequest.preAuthTransactionId(this.preAuthTransactionId);
            captureRequest.amount(this.amount);
            captureRequest.ipAddress(this.ipAddress);
            captureRequest.ecommerce(this.ecommerce);
            return captureRequest;
        }

        /**
         * Execute processCaptureTransaction request
         * @return SuccessfulPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public SuccessfulPaymentResponse execute() throws ApiException {
            CaptureRequest captureRequest = buildBodyParams();
            ApiResponse<SuccessfulPaymentResponse> localVarResp = processCaptureTransactionWithHttpInfo(idempotencyKey, captureRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processCaptureTransaction request with HTTP info returned
         * @return ApiResponse&lt;SuccessfulPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SuccessfulPaymentResponse> executeWithHttpInfo() throws ApiException {
            CaptureRequest captureRequest = buildBodyParams();
            return processCaptureTransactionWithHttpInfo(idempotencyKey, captureRequest);
        }

        /**
         * Execute processCaptureTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {
            CaptureRequest captureRequest = buildBodyParams();
            return processCaptureTransactionAsync(idempotencyKey, captureRequest, _callback);
        }
    }

    /**
     * Process Capture Transaction
     * 
     * @param idempotencyKey Idempotency Key. Alphanumeric 25-characters (required)
     * @return ProcessCaptureTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public ProcessCaptureTransactionRequestBuilder processCaptureTransaction(Integer preAuthTransactionId, double amount, String ipAddress, UUID idempotencyKey) throws IllegalArgumentException {
        if (preAuthTransactionId == null) throw new IllegalArgumentException("\"preAuthTransactionId\" is required but got null");
        
        if (ipAddress == null) throw new IllegalArgumentException("\"ipAddress\" is required but got null");
            

        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new ProcessCaptureTransactionRequestBuilder(preAuthTransactionId, amount, ipAddress, idempotencyKey);
    }
    private okhttp3.Call processPreauthTransactionCall(UUID idempotencyKey, PurchaseRequest purchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseRequest;

        // create path and map variables
        String localVarPath = "/payment/preauth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processPreauthTransactionValidateBeforeCall(UUID idempotencyKey, PurchaseRequest purchaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling processPreauthTransaction(Async)");
        }

        return processPreauthTransactionCall(idempotencyKey, purchaseRequest, _callback);

    }


    private ApiResponse<SuccessfulPaymentResponse> processPreauthTransactionWithHttpInfo(UUID idempotencyKey, PurchaseRequest purchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = processPreauthTransactionValidateBeforeCall(idempotencyKey, purchaseRequest, null);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processPreauthTransactionAsync(UUID idempotencyKey, PurchaseRequest purchaseRequest, final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processPreauthTransactionValidateBeforeCall(idempotencyKey, purchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessPreauthTransactionRequestBuilder {
        private final UUID idempotencyKey;
        private String ipAddress;
        private Boolean ecommerce;
        private Integer terminalId;
        private String currency;
        private Double amount;
        private String customerCode;
        private String invoiceNumber;
        private PaymentRequestInvoice invoice;
        private Address billingAddress;
        private Object cardData;

        private ProcessPreauthTransactionRequestBuilder(UUID idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set ipAddress
         * @param ipAddress IP address of the customer making the transaction, used as part of fraud detection. (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder ipAddress(String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        
        /**
         * Set ecommerce
         * @param ecommerce Set to indicate that the transaction is e-commerce. When set, the Helcim Fraud Defender will provide further analysis. (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder ecommerce(Boolean ecommerce) {
            this.ecommerce = ecommerce;
            return this;
        }
        
        /**
         * Set terminalId
         * @param terminalId For card transactions only. Id of the terminal you would want to use. Default terminal for of the currency will be used if you dont send this. (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder terminalId(Integer terminalId) {
            this.terminalId = terminalId;
            return this;
        }
        
        /**
         * Set currency
         * @param currency The currency abbreviation of the invoice, such as CAD or USD. This should match currency of existing invoice. (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Amount to be processed (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set customerCode
         * @param customerCode Existing customer code associated with the transaction (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder customerCode(String customerCode) {
            this.customerCode = customerCode;
            return this;
        }
        
        /**
         * Set invoiceNumber
         * @param invoiceNumber To be filled when associating transaction to existing invoice. Invoice should be associated to the same customer linked to the card (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        
        /**
         * Set invoice
         * @param invoice  (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder invoice(PaymentRequestInvoice invoice) {
            this.invoice = invoice;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set cardData
         * @param cardData  (optional)
         * @return ProcessPreauthTransactionRequestBuilder
         */
        public ProcessPreauthTransactionRequestBuilder cardData(Object cardData) {
            this.cardData = cardData;
            return this;
        }
        
        /**
         * Build call for processPreauthTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            return processPreauthTransactionCall(idempotencyKey, purchaseRequest, _callback);
        }

        private PurchaseRequest buildBodyParams() {
            PurchaseRequest purchaseRequest = new PurchaseRequest();
            return purchaseRequest;
        }

        /**
         * Execute processPreauthTransaction request
         * @return SuccessfulPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public SuccessfulPaymentResponse execute() throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            ApiResponse<SuccessfulPaymentResponse> localVarResp = processPreauthTransactionWithHttpInfo(idempotencyKey, purchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processPreauthTransaction request with HTTP info returned
         * @return ApiResponse&lt;SuccessfulPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SuccessfulPaymentResponse> executeWithHttpInfo() throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            return processPreauthTransactionWithHttpInfo(idempotencyKey, purchaseRequest);
        }

        /**
         * Execute processPreauthTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            return processPreauthTransactionAsync(idempotencyKey, purchaseRequest, _callback);
        }
    }

    /**
     * Process Preauth Transaction
     * 
     * @param idempotencyKey Idempotency Key. Alphanumeric 25-characters (required)
     * @return ProcessPreauthTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public ProcessPreauthTransactionRequestBuilder processPreauthTransaction(UUID idempotencyKey) throws IllegalArgumentException {
        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new ProcessPreauthTransactionRequestBuilder(idempotencyKey);
    }
    private okhttp3.Call processPurchaseTransactionCall(UUID idempotencyKey, PurchaseRequest purchaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseRequest;

        // create path and map variables
        String localVarPath = "/payment/purchase";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processPurchaseTransactionValidateBeforeCall(UUID idempotencyKey, PurchaseRequest purchaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling processPurchaseTransaction(Async)");
        }

        return processPurchaseTransactionCall(idempotencyKey, purchaseRequest, _callback);

    }


    private ApiResponse<SuccessfulPaymentResponse> processPurchaseTransactionWithHttpInfo(UUID idempotencyKey, PurchaseRequest purchaseRequest) throws ApiException {
        okhttp3.Call localVarCall = processPurchaseTransactionValidateBeforeCall(idempotencyKey, purchaseRequest, null);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processPurchaseTransactionAsync(UUID idempotencyKey, PurchaseRequest purchaseRequest, final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processPurchaseTransactionValidateBeforeCall(idempotencyKey, purchaseRequest, _callback);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessPurchaseTransactionRequestBuilder {
        private final UUID idempotencyKey;
        private String ipAddress;
        private Boolean ecommerce;
        private Integer terminalId;
        private String currency;
        private Double amount;
        private String customerCode;
        private String invoiceNumber;
        private PaymentRequestInvoice invoice;
        private Address billingAddress;
        private Object cardData;

        private ProcessPurchaseTransactionRequestBuilder(UUID idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set ipAddress
         * @param ipAddress IP address of the customer making the transaction, used as part of fraud detection. (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder ipAddress(String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        
        /**
         * Set ecommerce
         * @param ecommerce Set to indicate that the transaction is e-commerce. When set, the Helcim Fraud Defender will provide further analysis. (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder ecommerce(Boolean ecommerce) {
            this.ecommerce = ecommerce;
            return this;
        }
        
        /**
         * Set terminalId
         * @param terminalId For card transactions only. Id of the terminal you would want to use. Default terminal for of the currency will be used if you dont send this. (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder terminalId(Integer terminalId) {
            this.terminalId = terminalId;
            return this;
        }
        
        /**
         * Set currency
         * @param currency The currency abbreviation of the invoice, such as CAD or USD. This should match currency of existing invoice. (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Amount to be processed (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set customerCode
         * @param customerCode Existing customer code associated with the transaction (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder customerCode(String customerCode) {
            this.customerCode = customerCode;
            return this;
        }
        
        /**
         * Set invoiceNumber
         * @param invoiceNumber To be filled when associating transaction to existing invoice. Invoice should be associated to the same customer linked to the card (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        
        /**
         * Set invoice
         * @param invoice  (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder invoice(PaymentRequestInvoice invoice) {
            this.invoice = invoice;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set cardData
         * @param cardData  (optional)
         * @return ProcessPurchaseTransactionRequestBuilder
         */
        public ProcessPurchaseTransactionRequestBuilder cardData(Object cardData) {
            this.cardData = cardData;
            return this;
        }
        
        /**
         * Build call for processPurchaseTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            return processPurchaseTransactionCall(idempotencyKey, purchaseRequest, _callback);
        }

        private PurchaseRequest buildBodyParams() {
            PurchaseRequest purchaseRequest = new PurchaseRequest();
            return purchaseRequest;
        }

        /**
         * Execute processPurchaseTransaction request
         * @return SuccessfulPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public SuccessfulPaymentResponse execute() throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            ApiResponse<SuccessfulPaymentResponse> localVarResp = processPurchaseTransactionWithHttpInfo(idempotencyKey, purchaseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processPurchaseTransaction request with HTTP info returned
         * @return ApiResponse&lt;SuccessfulPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SuccessfulPaymentResponse> executeWithHttpInfo() throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            return processPurchaseTransactionWithHttpInfo(idempotencyKey, purchaseRequest);
        }

        /**
         * Execute processPurchaseTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {
            PurchaseRequest purchaseRequest = buildBodyParams();
            return processPurchaseTransactionAsync(idempotencyKey, purchaseRequest, _callback);
        }
    }

    /**
     * Process Purchase Transaction
     * 
     * @param idempotencyKey Idempotency Key. Alphanumeric 25-characters (required)
     * @return ProcessPurchaseTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public ProcessPurchaseTransactionRequestBuilder processPurchaseTransaction(UUID idempotencyKey) throws IllegalArgumentException {
        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new ProcessPurchaseTransactionRequestBuilder(idempotencyKey);
    }
    private okhttp3.Call processRefundTransactionCall(UUID idempotencyKey, RefundRequest refundRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refundRequest;

        // create path and map variables
        String localVarPath = "/payment/refund";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processRefundTransactionValidateBeforeCall(UUID idempotencyKey, RefundRequest refundRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling processRefundTransaction(Async)");
        }

        return processRefundTransactionCall(idempotencyKey, refundRequest, _callback);

    }


    private ApiResponse<SuccessfulPaymentResponse> processRefundTransactionWithHttpInfo(UUID idempotencyKey, RefundRequest refundRequest) throws ApiException {
        okhttp3.Call localVarCall = processRefundTransactionValidateBeforeCall(idempotencyKey, refundRequest, null);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processRefundTransactionAsync(UUID idempotencyKey, RefundRequest refundRequest, final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processRefundTransactionValidateBeforeCall(idempotencyKey, refundRequest, _callback);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessRefundTransactionRequestBuilder {
        private final Integer originalTransactionId;
        private final Double amount;
        private final String ipAddress;
        private final UUID idempotencyKey;
        private Boolean ecommerce;

        private ProcessRefundTransactionRequestBuilder(Integer originalTransactionId, double amount, String ipAddress, UUID idempotencyKey) {
            this.originalTransactionId = originalTransactionId;
            this.amount = amount;
            this.ipAddress = ipAddress;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set ecommerce
         * @param ecommerce Set to indicate that the transaction is e-commerce. When set, the Helcim Fraud Defender will provide further analysis. (optional)
         * @return ProcessRefundTransactionRequestBuilder
         */
        public ProcessRefundTransactionRequestBuilder ecommerce(Boolean ecommerce) {
            this.ecommerce = ecommerce;
            return this;
        }
        
        /**
         * Build call for processRefundTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RefundRequest refundRequest = buildBodyParams();
            return processRefundTransactionCall(idempotencyKey, refundRequest, _callback);
        }

        private RefundRequest buildBodyParams() {
            RefundRequest refundRequest = new RefundRequest();
            refundRequest.originalTransactionId(this.originalTransactionId);
            refundRequest.amount(this.amount);
            refundRequest.ipAddress(this.ipAddress);
            refundRequest.ecommerce(this.ecommerce);
            return refundRequest;
        }

        /**
         * Execute processRefundTransaction request
         * @return SuccessfulPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public SuccessfulPaymentResponse execute() throws ApiException {
            RefundRequest refundRequest = buildBodyParams();
            ApiResponse<SuccessfulPaymentResponse> localVarResp = processRefundTransactionWithHttpInfo(idempotencyKey, refundRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processRefundTransaction request with HTTP info returned
         * @return ApiResponse&lt;SuccessfulPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SuccessfulPaymentResponse> executeWithHttpInfo() throws ApiException {
            RefundRequest refundRequest = buildBodyParams();
            return processRefundTransactionWithHttpInfo(idempotencyKey, refundRequest);
        }

        /**
         * Execute processRefundTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {
            RefundRequest refundRequest = buildBodyParams();
            return processRefundTransactionAsync(idempotencyKey, refundRequest, _callback);
        }
    }

    /**
     * Process Refund Transaction
     * 
     * @param idempotencyKey Idempotency Key. Alphanumeric 25-characters (required)
     * @return ProcessRefundTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public ProcessRefundTransactionRequestBuilder processRefundTransaction(Integer originalTransactionId, double amount, String ipAddress, UUID idempotencyKey) throws IllegalArgumentException {
        if (originalTransactionId == null) throw new IllegalArgumentException("\"originalTransactionId\" is required but got null");
        
        if (ipAddress == null) throw new IllegalArgumentException("\"ipAddress\" is required but got null");
            

        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new ProcessRefundTransactionRequestBuilder(originalTransactionId, amount, ipAddress, idempotencyKey);
    }
    private okhttp3.Call processWithdrawalTransactionCall(UUID idempotencyKey, WithdrawRequest withdrawRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = withdrawRequest;

        // create path and map variables
        String localVarPath = "/payment/withdraw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processWithdrawalTransactionValidateBeforeCall(UUID idempotencyKey, WithdrawRequest withdrawRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling processWithdrawalTransaction(Async)");
        }

        return processWithdrawalTransactionCall(idempotencyKey, withdrawRequest, _callback);

    }


    private ApiResponse<SuccessfulAchTransactionResponse> processWithdrawalTransactionWithHttpInfo(UUID idempotencyKey, WithdrawRequest withdrawRequest) throws ApiException {
        okhttp3.Call localVarCall = processWithdrawalTransactionValidateBeforeCall(idempotencyKey, withdrawRequest, null);
        Type localVarReturnType = new TypeToken<SuccessfulAchTransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processWithdrawalTransactionAsync(UUID idempotencyKey, WithdrawRequest withdrawRequest, final ApiCallback<SuccessfulAchTransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processWithdrawalTransactionValidateBeforeCall(idempotencyKey, withdrawRequest, _callback);
        Type localVarReturnType = new TypeToken<SuccessfulAchTransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessWithdrawalTransactionRequestBuilder {
        private final UUID idempotencyKey;
        private String ipAddress;
        private Boolean ecommerce;
        private Integer terminalId;
        private String currency;
        private Double amount;
        private String customerCode;
        private String invoiceNumber;
        private PaymentRequestInvoice invoice;
        private Address billingAddress;
        private Object bankData;

        private ProcessWithdrawalTransactionRequestBuilder(UUID idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set ipAddress
         * @param ipAddress IP address of the customer making the transaction, used as part of fraud detection. (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder ipAddress(String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        
        /**
         * Set ecommerce
         * @param ecommerce Set to indicate that the transaction is e-commerce. When set, the Helcim Fraud Defender will provide further analysis. (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder ecommerce(Boolean ecommerce) {
            this.ecommerce = ecommerce;
            return this;
        }
        
        /**
         * Set terminalId
         * @param terminalId For card transactions only. Id of the terminal you would want to use. Default terminal for of the currency will be used if you dont send this. (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder terminalId(Integer terminalId) {
            this.terminalId = terminalId;
            return this;
        }
        
        /**
         * Set currency
         * @param currency The currency abbreviation of the invoice, such as CAD or USD. This should match currency of existing invoice. (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Amount to be processed (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set customerCode
         * @param customerCode Existing customer code associated with the transaction (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder customerCode(String customerCode) {
            this.customerCode = customerCode;
            return this;
        }
        
        /**
         * Set invoiceNumber
         * @param invoiceNumber To be filled when associating transaction to existing invoice. Invoice should be associated to the same customer linked to the card (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        
        /**
         * Set invoice
         * @param invoice  (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder invoice(PaymentRequestInvoice invoice) {
            this.invoice = invoice;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set bankData
         * @param bankData  (optional)
         * @return ProcessWithdrawalTransactionRequestBuilder
         */
        public ProcessWithdrawalTransactionRequestBuilder bankData(Object bankData) {
            this.bankData = bankData;
            return this;
        }
        
        /**
         * Build call for processWithdrawalTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WithdrawRequest withdrawRequest = buildBodyParams();
            return processWithdrawalTransactionCall(idempotencyKey, withdrawRequest, _callback);
        }

        private WithdrawRequest buildBodyParams() {
            WithdrawRequest withdrawRequest = new WithdrawRequest();
            return withdrawRequest;
        }

        /**
         * Execute processWithdrawalTransaction request
         * @return SuccessfulAchTransactionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public SuccessfulAchTransactionResponse execute() throws ApiException {
            WithdrawRequest withdrawRequest = buildBodyParams();
            ApiResponse<SuccessfulAchTransactionResponse> localVarResp = processWithdrawalTransactionWithHttpInfo(idempotencyKey, withdrawRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processWithdrawalTransaction request with HTTP info returned
         * @return ApiResponse&lt;SuccessfulAchTransactionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SuccessfulAchTransactionResponse> executeWithHttpInfo() throws ApiException {
            WithdrawRequest withdrawRequest = buildBodyParams();
            return processWithdrawalTransactionWithHttpInfo(idempotencyKey, withdrawRequest);
        }

        /**
         * Execute processWithdrawalTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SuccessfulAchTransactionResponse> _callback) throws ApiException {
            WithdrawRequest withdrawRequest = buildBodyParams();
            return processWithdrawalTransactionAsync(idempotencyKey, withdrawRequest, _callback);
        }
    }

    /**
     * Process Withdraw Transaction
     * 
     * @param idempotencyKey Idempotency Key. Alphanumeric 25-characters (required)
     * @return ProcessWithdrawalTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public ProcessWithdrawalTransactionRequestBuilder processWithdrawalTransaction(UUID idempotencyKey) throws IllegalArgumentException {
        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new ProcessWithdrawalTransactionRequestBuilder(idempotencyKey);
    }
    private okhttp3.Call reverseTransactionCall(UUID idempotencyKey, RefundRequest1 refundRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refundRequest1;

        // create path and map variables
        String localVarPath = "/payment/reverse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reverseTransactionValidateBeforeCall(UUID idempotencyKey, RefundRequest1 refundRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling reverseTransaction(Async)");
        }

        return reverseTransactionCall(idempotencyKey, refundRequest1, _callback);

    }


    private ApiResponse<Object> reverseTransactionWithHttpInfo(UUID idempotencyKey, RefundRequest1 refundRequest1) throws ApiException {
        okhttp3.Call localVarCall = reverseTransactionValidateBeforeCall(idempotencyKey, refundRequest1, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reverseTransactionAsync(UUID idempotencyKey, RefundRequest1 refundRequest1, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reverseTransactionValidateBeforeCall(idempotencyKey, refundRequest1, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReverseTransactionRequestBuilder {
        private final Integer cardTransactionId;
        private final String ipAddress;
        private final UUID idempotencyKey;
        private Boolean ecommerce;

        private ReverseTransactionRequestBuilder(Integer cardTransactionId, String ipAddress, UUID idempotencyKey) {
            this.cardTransactionId = cardTransactionId;
            this.ipAddress = ipAddress;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set ecommerce
         * @param ecommerce Set to indicate that the transaction is e-commerce. When set, the Helcim Fraud Defender will provide further analysis. (optional)
         * @return ReverseTransactionRequestBuilder
         */
        public ReverseTransactionRequestBuilder ecommerce(Boolean ecommerce) {
            this.ecommerce = ecommerce;
            return this;
        }
        
        /**
         * Build call for reverseTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RefundRequest1 refundRequest1 = buildBodyParams();
            return reverseTransactionCall(idempotencyKey, refundRequest1, _callback);
        }

        private RefundRequest1 buildBodyParams() {
            RefundRequest1 refundRequest1 = new RefundRequest1();
            refundRequest1.cardTransactionId(this.cardTransactionId);
            refundRequest1.ipAddress(this.ipAddress);
            refundRequest1.ecommerce(this.ecommerce);
            return refundRequest1;
        }

        /**
         * Execute reverseTransaction request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            RefundRequest1 refundRequest1 = buildBodyParams();
            ApiResponse<Object> localVarResp = reverseTransactionWithHttpInfo(idempotencyKey, refundRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reverseTransaction request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            RefundRequest1 refundRequest1 = buildBodyParams();
            return reverseTransactionWithHttpInfo(idempotencyKey, refundRequest1);
        }

        /**
         * Execute reverseTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            RefundRequest1 refundRequest1 = buildBodyParams();
            return reverseTransactionAsync(idempotencyKey, refundRequest1, _callback);
        }
    }

    /**
     * Process Reverse Transaction
     * 
     * @param idempotencyKey Idempotency Key. Alphanumeric 25-characters (required)
     * @return ReverseTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public ReverseTransactionRequestBuilder reverseTransaction(Integer cardTransactionId, String ipAddress, UUID idempotencyKey) throws IllegalArgumentException {
        if (cardTransactionId == null) throw new IllegalArgumentException("\"cardTransactionId\" is required but got null");
        if (ipAddress == null) throw new IllegalArgumentException("\"ipAddress\" is required but got null");
            

        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new ReverseTransactionRequestBuilder(cardTransactionId, ipAddress, idempotencyKey);
    }
    private okhttp3.Call verifyTransactionCall(UUID idempotencyKey, VerifyRequest verifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyRequest;

        // create path and map variables
        String localVarPath = "/payment/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiAccessAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyTransactionValidateBeforeCall(UUID idempotencyKey, VerifyRequest verifyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling verifyTransaction(Async)");
        }

        return verifyTransactionCall(idempotencyKey, verifyRequest, _callback);

    }


    private ApiResponse<SuccessfulPaymentResponse> verifyTransactionWithHttpInfo(UUID idempotencyKey, VerifyRequest verifyRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyTransactionValidateBeforeCall(idempotencyKey, verifyRequest, null);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyTransactionAsync(UUID idempotencyKey, VerifyRequest verifyRequest, final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyTransactionValidateBeforeCall(idempotencyKey, verifyRequest, _callback);
        Type localVarReturnType = new TypeToken<SuccessfulPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class VerifyTransactionRequestBuilder {
        private final String ipAddress;
        private final String currency;
        private final Card cardData;
        private final Address billingAddress;
        private final UUID idempotencyKey;
        private Boolean ecommerce;
        private String customerCode;
        private String invoiceNumber;
        private VerifyRequestInvoice invoice;

        private VerifyTransactionRequestBuilder(String ipAddress, String currency, Card cardData, Address billingAddress, UUID idempotencyKey) {
            this.ipAddress = ipAddress;
            this.currency = currency;
            this.cardData = cardData;
            this.billingAddress = billingAddress;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set ecommerce
         * @param ecommerce Set to indicate that the transaction is e-commerce. When set, the Helcim Fraud Defender will provide further analysis. (optional)
         * @return VerifyTransactionRequestBuilder
         */
        public VerifyTransactionRequestBuilder ecommerce(Boolean ecommerce) {
            this.ecommerce = ecommerce;
            return this;
        }
        
        /**
         * Set customerCode
         * @param customerCode Existing customer code associated with the transaction (optional)
         * @return VerifyTransactionRequestBuilder
         */
        public VerifyTransactionRequestBuilder customerCode(String customerCode) {
            this.customerCode = customerCode;
            return this;
        }
        
        /**
         * Set invoiceNumber
         * @param invoiceNumber To be filled when associating transaction to existing invoice. Invoice should be associated to the same customer linked to the card (optional)
         * @return VerifyTransactionRequestBuilder
         */
        public VerifyTransactionRequestBuilder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }
        
        /**
         * Set invoice
         * @param invoice  (optional)
         * @return VerifyTransactionRequestBuilder
         */
        public VerifyTransactionRequestBuilder invoice(VerifyRequestInvoice invoice) {
            this.invoice = invoice;
            return this;
        }
        
        /**
         * Build call for verifyTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VerifyRequest verifyRequest = buildBodyParams();
            return verifyTransactionCall(idempotencyKey, verifyRequest, _callback);
        }

        private VerifyRequest buildBodyParams() {
            VerifyRequest verifyRequest = new VerifyRequest();
            verifyRequest.ipAddress(this.ipAddress);
            verifyRequest.ecommerce(this.ecommerce);
            verifyRequest.currency(this.currency);
            verifyRequest.customerCode(this.customerCode);
            verifyRequest.invoiceNumber(this.invoiceNumber);
            verifyRequest.invoice(this.invoice);
            verifyRequest.cardData(this.cardData);
            verifyRequest.billingAddress(this.billingAddress);
            return verifyRequest;
        }

        /**
         * Execute verifyTransaction request
         * @return SuccessfulPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public SuccessfulPaymentResponse execute() throws ApiException {
            VerifyRequest verifyRequest = buildBodyParams();
            ApiResponse<SuccessfulPaymentResponse> localVarResp = verifyTransactionWithHttpInfo(idempotencyKey, verifyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute verifyTransaction request with HTTP info returned
         * @return ApiResponse&lt;SuccessfulPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SuccessfulPaymentResponse> executeWithHttpInfo() throws ApiException {
            VerifyRequest verifyRequest = buildBodyParams();
            return verifyTransactionWithHttpInfo(idempotencyKey, verifyRequest);
        }

        /**
         * Execute verifyTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SuccessfulPaymentResponse> _callback) throws ApiException {
            VerifyRequest verifyRequest = buildBodyParams();
            return verifyTransactionAsync(idempotencyKey, verifyRequest, _callback);
        }
    }

    /**
     * Process Verify Transaction
     * 
     * @param idempotencyKey Idempotency Key. Alphanumeric 25-characters (required)
     * @return VerifyTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Failed </td><td>  -  </td></tr>
     </table>
     */
    public VerifyTransactionRequestBuilder verifyTransaction(String ipAddress, String currency, Card cardData, Address billingAddress, UUID idempotencyKey) throws IllegalArgumentException {
        if (ipAddress == null) throw new IllegalArgumentException("\"ipAddress\" is required but got null");
            

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (cardData == null) throw new IllegalArgumentException("\"cardData\" is required but got null");
        if (billingAddress == null) throw new IllegalArgumentException("\"billingAddress\" is required but got null");
        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new VerifyTransactionRequestBuilder(ipAddress, currency, cardData, billingAddress, idempotencyKey);
    }
}
